2018/08/16

자바수업_코드 

0-1/0-2/0-3 코드는 같은 패키지
////0-1
//package mod.Korea;
//
//public class Father {
//
//	// 접근제어자 4가지
//	private String privatevalue = "x"; // 클래스 자기자신만 접근이 가능하다.
//	String defaultvalue = "△"; // 접근제어자 default 상태, 클래스 자기자신 + 같은 패키지 소속 클래스
//	protected String protectedvalue = "□"; // 클래스 자기자신 + 같은 패키지 소속 클래스 + 상속관계 클래스
//	public String publicvalue = "○"; // 어떠한 클래스도 모두다 접근이 가능하다. 
//
//	public void show() {
//		
//		System.out.println(privatevalue);
//		System.out.println(defaultvalue);
//		System.out.println(protectedvalue);
//		System.out.println(publicvalue);
//	}
//}


////0-2
//package mod.Korea;
//
//// A extends B 
//// A 클래스는 B 클래스의 자식입니다. B 클래스는 A 클래스의 부모입니다. 
//// A 클래스는 B 클래스의 자식으로 자식 클래스는 부모인 B 클래스의 자원(변수,메소드)을 접근하여 사용할 수 있다.
//// 부모 클래스가 갖고있는 자원의 접근 범위를 자식 클래스까지 연장하겠다.
//public class Daughter extends Father {
//	
//	public void show() {
//		
//	//	System.out.println(privatevalue); //  private는 자기자신만 접근이 가능하다.
//		System.out.println(defaultvalue);
//		System.out.println(protectedvalue);
//		System.out.println(publicvalue);
//	}
//}


////0-3
//package mod.Korea;
//
///*
// * Father 클래스의 부하직원인 Employee 클래스
//*/
//public class Employee {
//
//	public void show() {
//		
//			// Employee 클래스와 Father 클래스는 상속관계가 아니므로
//			// Employee 클래스에서 Father 클래스의 자원을 사용하려면 Father 클래스로 만든 객체를 획득해야 한다.
//			Father father = new Father();
//			
//		//	System.out.println(father.privatevalue);  //  private는 자신클래스의 자기자신만 접근이 가능하다.
//			System.out.println(father.defaultvalue);  
//			System.out.println(father.protectedvalue);
//			System.out.println(father.publicvalue);
//		}
//}

0-4/0-5는 같은 패키지
////0-4
//package mod.Usa;
//
//import mod.Korea.Father;
//
//public class Friend {
//
//		public void show() {
//			
//		Father father = new Father();
//
//	//	System.out.println( father.privatevalue);  //  private는 자신클래스의 자기자신만 접근이 가능하다.
//	//	System.out.println( father.defaultvalue);  //  son 클래스와 Farher 클래스의 패키지가 다르다.
//	//	System.out.println( father.protectedvalue);
//		System.out.println( father.publicvalue);
//}
//}


////0-5
//package mod.Usa;
//
//// Son 클래스와 Father 클래스는 다른 패키지에 존재하므로 import 구문이 필요하다.
//import mod.Korea.Father;
//
//public class Son extends Father {
//	
//	public void show() {
//		
//		//	System.out.println(privatevalue);  //  private는 자신클래스의 자기자신만 접근이 가능하다.
//		//	System.out.println(defaultvalue);  //  son 클래스와 Father 클래스의 패키지가 다르다.
//			System.out.println(protectedvalue);
//			System.out.println(publicvalue);
//		}
//}

0-6패키지 따로 
////0-6
//package modf;
//
//import mod.Korea.Daughter;
//import mod.Korea.Employee;
//import mod.Korea.Father;
//import mod.Usa.Friend;
//import mod.Usa.Son;
//
//public class Test {
//
//	public static void main(String[] args) {
//		Father f = new Father();
//		f.show();
//		System.out.println();
//		
//		Daughter d= new Daughter();
//		d.show();
//		System.out.println();
//		
//		Employee e = new Employee();
//		e.show();
//		System.out.println();
//		
//		Son s = new Son();
//		s.show();
//		System.out.println();
//		
//		Friend friend = new Friend();
//		friend.show();
//		System.out.println();
//	}
//}


////0-7
//
//public class P294 {
//	public static void main(String[] args) {
//			House house1 = new House();
//			
//			System.out.println(house1.color);
//			
//			House house2 = new House("blue", 4);
//			
//			System.out.println(house2.color);
//	}
//}
//
//class House {
//	String color = "white";
//	int rooms = 3;
//	
//	public House() {
//		System.out.println("House() called.");
//	}
//	
//	
//	public House(String color, int rooms) {
//		super();
//		// this : 객체상태인 자기자신을 지칭한다. 여기선 House를 가르킴 
//		this.color = color;
//		this.rooms = rooms;
//		System.out.println("House (String color, int rooms) called.");
//	}
//
//
//	public void openDoor() {
//		System.out.println("문을 열고 들어간다.");
//	}
//}


////0-8
//
//public class p295 {
//	public static void main(String[] args) {
//		User user = new User();
////		user.id; // The field User.id is not visible
////		user.password;
////		user.email;
//		
//
//		System.out.println(user.getId());
//		System.out.println(user.getPassword());
//		System.out.println(user.getEmail());
//		
//		User u1 = new User();
//		User u2 = new User();
//		User u3 = new User();
//		
//		System.out.println(u1.getId());
//		System.out.println(u2.getId());
//		System.out.println(u3.getId());
//		
//		User u4 = new User("Go");
//		User u5 = new User("Cat");
//		User u6 = new User("TOY");
//	
//		System.out.println(u4.getId());
//		System.out.println(u5.getId());
//		System.out.println(u6.getId());
//	}
//}
//
///*
// * java Bean 규약
// * 자바빈은 프레임워크 코드와 개발자의 코드의 연동시 
// * 무리없이 연결되도록 데이터를 보관하는 클래스의 
// * 멤버변수, getter/setter 메소드를 선언하는 약속
// * */
//
//class User {
//	// private : 접근제어자(멤버변수에 누가 접근할수 있는지 여부를 결정하는 키워드)
//	// 일반적으로 멤버변수에 직접 접근하는 것을 막기위해 설정한다.
//	private String id = "Toom";
//	private String password = "1234";
//	// 멤버변수는 자동으로 초기화되는데 String  참조형이므로 null이 할당된다.
//	private String email;
//	
//	public User() {
//	
//	}
//	
//	public User(String id) {
//		this.id = id;
//	//	id = nick;
//		
//	}
//	
//	// getter 메소드 선언하는 방법
//	// get + 멤버변수명 (단, 멤버변수 맨 앞글자는 대문자로)
//	public String getId() { 
//		return id;
//	}
//	
//	// setter 메소드 선언하는 방법
//	// set + 멤버변수명 (단, 멤버변수 맨 앞글자는 대문자로)
//	public void setId(String id) {
//		this.id = id;
//	}
//	public String getPassword() {
//		return password;
//	}
//	public void setPassword(String password) {
//		this.password = password;
//	}
//	public String getEmail() {
//		return email;
//	}
//	public void setEmail(String email) {
//		this.email = email;
//	}
//	
//}

////0-9
//import java.util.Random;
//
//public class p310 {
//	public static void main(String[] args) {
////		Random r = new Random();
////		System.out.println(r.nextInt(45));
//		
//		MyRandom rnd = new MyRandom();
//		System.out.println(rnd.nextInt(45));
//		
//	}
//}
//
//class MyRandom extends Random {
//	
//}

1-0/1-1/1-2는 같은 패키지 
////1-0
//package inhenit;
//
//public class Father {
//
//	String name;
//	{
//		name = "첫째";
//	}
//	public Father() {
//	name = "22222";
//	}
//}


////1-1
//package inhenit;
//
//public class child extends Father {
//	public String hobby = "Soju";
//	
//	{	name = "튼튼이"; }
//	
////	public child() {
////		name = "튼튼이";
////	}
//
//	public child() {
//		name = "1111";
//	}
//}


////1-2
//package inhenit;
//
//public class text {
//
//	public static void main(String[] args) {
//		Father f = new Father();
//		System.out.println(f.name);
//		
//		child c = new child();
//		System.out.println(c.name);
//	}
//}

1-3/1-4/1-5 패키지는 같은 패키지
////1-3
//package p323;
//
///*
// * 중요 : extends를 명시하지 않으면 자동으로extends java.lang.Object 선언된것과 같이 된다.
// *  */
//
//public class Kores  
////extends java.lang.Object
//{
//	public void play() {
//		System.out.println("춤을 추다");
//	}
//	
//}

////1-4
//package p323;
//
//public class Gildong extends Kores {
//
//	/*
//	 * Comment(주석)
//	 * */
//	// Annotation(주해)
//	@Override // 해당 메소드는 부모클래스가 정의한 메소드인데 자식이 다시 정의해서 덮어쓴 상태다.
//	public void play() {
//		// TODO Auto-generated method stub
//		//super.play();
//		System.out.println("술을 마신다.");
//	}
//
//}


////1-5
//package p323;
//
//public class Test {
// // 자바는 언제나 단일 상속만 지원합니다.
//	// 왜?
//	// 정말?
//	
//	
//	public static void main(String[] args) {
//		Gildong g = new Gildong();
//		g.play();
//		System.out.println(g.toString());
//		
//		Kores k = new Kores();
//		k.play();
//		
//		// Object 클래스가 자식에게 제공하는 toString() 메소드는 기본적으로 만들 때 사용한 클래스 정보를 문장열로 리턴한다.
//		System.out.println(k.toString());
//	}
//	
//}

////1-6
//// 자바 클래스의 관계
//// 1. 상속 : IS-A 관계
//// 2. 조립 : Has - A 관계
//public class P316 {
//
//	public static void main(String[] args) {
//	
//	}
//
//}
//
//// Mycar is MyEngine? No
//// Myengine is Mycar? NO
//// MyCar has MyEngine? Yes
//// MyEngine has MyCar? No
//class MyCar {
//	MyEngine engine;
//}
//
//class MyEngine {
//	
//}
//
//class HongFamily {
//	
//}
//
//// 홍씨는 이름이 다 길동인가요? no 
//// Gildong is HongFamily? Yes ==> 상속관계
//class Gildong extends HongFamily {
//	
//}
//
//// 동물은 개인가요? no
////개는 동물입니까? yes
//class Animal {
//	
//}
//
//class Dog extends Animal {
//	
//}


1-7/1-8/1-9/2-0/2-1/2-2/2-3/2-4/2-5 같은 패키지 
////1-7
//package p330;
//
//public class Gildong extends HongFamily {
//
//	public Gildong() {
//	// super : 부모 객체 즉 HongFamily 
//	// super() : 부모생성자, 생략이 가능하다. 생략하면 부모의 디폴트 생성자를 자동으로 추가된다.
//	super();
//	System.out.println("Gildong() called.");
//	}
//}


////1-8
//package p330;
//
//public class HongFamily extends Korean {
//	String food = "치즈";
//	
//	public HongFamily() {
//		super();
//	System.out.println("HongFamily() called.");
//	}
//	
//	// 메소드 재정의 
//	public void play() {
//		System.out.println("술을 마신다.");
//	}
//	
//	public void doSomethingAfterMeal() {
//		System.out.println("술을 마신다.");
//	}
//	
//}

////1-9
//package p330;
//
//public class Korean  {
//	
//	String food = "김치";
//	public Korean() {
//		super();
//		System.out.println("Korean() called.");
//	}
//	
//	public void play() {
//		System.out.println("춤을 춘다.");
//	}
//	
//}

////2-0
//package p330;
//
//public class Gilsoon extends HongFamily {
//
//}


////2-1
//package p330;
//
//public class LeeFamily extends Korean {
//
//}


////2-2
//package p330;
//
//public class Kimfamily extends Korean{
//
//	public void walk() {
//		System.out.println("걷는다.");
//	}
//}


////2-3
//package p330;
//
//public class text {
//	public static void main(String[] args) {
//		//new Gildong();
//		
//		// 상속의 룰을 지키기 위해서 자식객체보다 부모객체가 먼저 만들어 저야 한다.
//		// Korean() called.
//		// HongFamily() called.
//		// Gildong() called.
//		
//		Gildong g = new Gildong();
//		// 자식객체에서 가장 가까운 자원을 사용한다.
//		System.out.println(g.food);
//		g.play();
//		
//		// 업캐스팅(Up - casting) : 실제 자료형으로 지칭하지 않고 부모자료형으로 높여서 지칭하는것 
//		// 다형성(Polymorphism) : 상속관계에 따라 업캐스팅/다운 캐스팅하여 대상 객체를 취급할 수 있는 성질
//		HongFamily g2 = new Gildong();
//		Gildong g4 = (Gildong) g2;
//		Korean g5 = g4;
//		
//		HongFamily gilsoon = new Gilsoon();
//		
//		int a = 10;
//		long b = a; // 자동캐스팅
//		short c = (short) a; // 명시적 캐스팅
//		
//		System.out.println("================");
//		
//		Korean g3 = new Gildong();
//		System.out.println(g3.food); 
//		// 다형성에서  변수는 은닉되고 메소드는 재정의 된다.
//		// 지칭에 따라 변수는 지칭에 영향을 받고 메소드는 실체에 영향을 받는다.
//		g3.play(); // 메소드는 지칭에 상관없이 실체에서 가장 가까운 메소드가 사용된다.
//		
//		HongFamily hf =(HongFamily) g3;
//		System.out.println(hf.food);
//		hf.play();
//		
//	}
//}

////2-4
//package p330;
//
//public class text2 {
//
//	public static void main(String[] args) {
//		HongFamily[] people = {
//				new Gildong(),
//				new Gildong(),
//				new Gildong(),
//				new Gilsoon()
//		};
//		
//		Korean[] koreans = {
//				new Korean(), 
//				new HongFamily(),
//				new Gildong()
//				};
//		
//		Korean[] kors = {
//				new Kimfamily(), 
//				new HongFamily(),
//				new LeeFamily()
//				};
//		
//		allplay(kors);
//	}
//
//	private static void allplay(Korean[] kors) {
//		for (int i = 0; i < kors.length; i++) {
//			kors[i].play();
//		}
//		
//	}
//	
//}

////2-5
//package p330;
//
//public class text3 {
//
//	public static void main(String[] args) {
//		Korean[] kors = {
//				new Kimfamily(), 
//				new HongFamily(),
//				new LeeFamily()
//				};
//		
//		allplay(kors);
//	}
//
//	private static void allplay(Korean[] kors) {
//		for (int i = 0; i < kors.length; i++) {
//			kors[i].play();
//			
//			// 배열에서 꺼낸 객체가 HongFamily 이면 추가적으로  메소드를 수행한다.
//			// 배열에서 꺼낸 객체가 KimFamily 이면 추가적으로 walk() 메소드를 수행한다.
//			
//			if (kors[i] instanceof HongFamily) {
//				HongFamily hf = (HongFamily) kors[i];
//				hf.doSomethingAfterMeal();
//			} 
//			else if (kors[i] instanceof Kimfamily) {
//				Kimfamily kf = (Kimfamily) kors[i];
//				kf.walk();
//			}
//			
//		}
//	}
//}


////6-24
//class Car {
//	String color;		// 색상
//	String gearType;	// 변속기 종류 - auto(자동), manual(수동)
//	int door;			// 문의 개수
//
//	Car() {}
//	Car(String c, String g, int d) {
//		color = c;
//		gearType = g;
//		door = d;
//	}
//}
//
//class CarTest {
//	public static void main(String[] args) {
//		Car c1 = new Car();
//		c1.color = "white";
//		c1.gearType = "auto";
//		c1.door = 4;
//
//		Car c2 = new Car("white", "auto", 4);
//
//		System.out.println("c1의 color=" + c1.color + ", gearType=" + c1.gearType+ ", door="+c1.door);
//		System.out.println("c2의 color=" + c2.color + ", gearType=" + c2.gearType+ ", door="+c2.door);
//	}
//}



////6-25
//class Car2 {
//	String color;		// 색상
//	String gearType;	// 변속기 종류 - auto(자동), manual(수동)
//	int door;			// 문의 개수
//
//	Car2() {
//		this("white", "auto", 4);	 // this(파라미터) 다른 생성자를 호출한다.
//	}
//
//	Car2(String color) {
//		this(color, "auto", 4);
//	}
//	Car2(String color, String gearType, int door) {
//		this.color    = color;
//		this.gearType = gearType;
//		this.door     = door;
//	}
//}
//
//class CarTest2 {
//	public static void main(String[] args) {
//		Car2 c1 = new Car2();	
//		Car2 c2 = new Car2("blue");
//
//		System.out.println("c1의 color=" + c1.color + ", gearType=" + c1.gearType+ ", door="+c1.door);
//		System.out.println("c2의 color=" + c2.color + ", gearType=" + c2.gearType+ ", door="+c2.door);
//	}
//}


////6-27
//import java.util.Arrays;
//
//class BlockTest {
//
//	static String a = "";
//	
//	static {
//		System.out.println("1 : static { }");
//		a = "Hi";
//	}
// 
//	String b = "";
//	
//	{
//		System.out.println("2 : { }");
//	}
//	
//	int[] nums ;
//	{
////		nums = new int[10];
////		for (int i = 0; i < nums.length; i++) {
////			nums[i] = i * i;
////		}
//	}
//
//	
//	
//	public BlockTest() {     
//		System.out.println("3 : 생성자");
//		
//		nums = new int[10];
//		for (int i = 0; i < nums.length; i++) {
//			nums[i] = i * i;
//		}
//	}
//
//	public static void main(String args[]) {
//	//	System.out.println("BlockTest bt = new BlockTest(); ");
//		BlockTest bt = new BlockTest();
//		System.out.println();
//		
//	//	System.out.println("BlockTest bt2 = new BlockTest(); ");
//		BlockTest bt2 = new BlockTest();
//		
//		System.out.println(Arrays.toString(bt2.nums));
//	}
//}


////7-1
//class Tv {
//	boolean power; 	// 전원상태(on/off)
//	int channel;	// 채널
//
//	void power()        {   power = !power; }
//	void channelUp()    { 	 ++channel;     }
//	void channelDown()  {	 --channel;	    }
//}
//
//class CaptionTv extends Tv {
//	boolean caption;		// 캡션상태(on/off)
//	void displayCaption(String text) {
//		if (caption) {	// 캡션 상태가 on(true)일 때만 text를 보여 준다.
//			System.out.println(text);
//		}
//	}
//}
//
//class CaptionTvTest {
//	public static void main(String args[]) {
//		CaptionTv ctv = new CaptionTv();
//		ctv.channel = 10;				// 조상 클래스로부터 상속받은 멤버
//		ctv.channelUp();				// 조상 클래스로부터 상속받은 멤버
//		System.out.println(ctv.channel);
//		ctv.displayCaption("Hello, World");	
//		ctv.caption = true;				    // 캡션기능을 켠다.
//		ctv.displayCaption("Hello, World");	// 캡션을 화면에 보여 준다.
//	}
//}
