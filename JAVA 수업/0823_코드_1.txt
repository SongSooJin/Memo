2018/08/23

자바수업_코드_1

////0-1
//package p482;
//
//public class p482 {
//
//	public static void main(String[] args) {
//		/*
//		 * String 변수로 문자열을 조작하면 객체가 생성되므로 좋지 않습니다.
//		 * 문자열을 조작할 때 대신 StringBuffer , StringBuilder 를 사용합니다.
//		 * StringBuffer : 멀티 스레드 환경에서도 사용한다. 멀티 스레드에서도 안전하게 수행되기
//		 * 						위해서 코드의 부분적인 락이 걸려있기 때문에 처리속도는 StringBuilder 보다 
//		 * 						느리게 됩니다.
//		 * StringBuilder : 싱글 스레드 환경에서 사용된다.
//		 * 
//		 * */
//
//		StringBuffer sb = new StringBuffer();
//		for (int i = 0; i < 100; i++) {
//			sb.append(i);
//		}
//		System.out.println(sb.toString());
//			
//		StringBuilder stringBuilder = new StringBuilder();
//		for (int i = 0; i < 100; i++) {
//			stringBuilder.append(i);
//		}
//		System.out.println(stringBuilder.toString());
//		
//	}
//}


////0-2
//package p491;
//
//import java.util.ArrayList;
//import java.util.List;
//
//public class p491 {
//	
//	public static void main(String[] args) {
//	
//		int[] nums = {10, 20, 30};
//		// java.lang.ArrayIndexOutOfBoundsException
//		// nums[nums.length] = 40;
//		
//		// 빠른 속도가 최우선이라면 배열을 사용하지만 그렇지 않은 경우
//		// 취급이 편한 도구를 선호하게 된다. 대안으로 Collection 클래스들을 대신 사용한다.
//		
//		// 동적배열
//		// <Integer> : <취급하는자료형> : 지네릭, 기초타입지원하지 않음
//		List<Integer> number = new ArrayList<Integer>(); 
//		number.add(10); 	 // 자동으로 new Integer(10)로 처리됨
//		number.add(20);
//		number.add(30);
//		number.add(number.size()-1,40);
//		number.add(new Integer(100));
//		
//		// 기본 자료형  8개를 객체타입으로 취급할 수 있도록 각 자료형마다 대응하는 클래스가 있다.
//		// 이들간의 형변환은 완전 전자동이다.
//		int a = 10;
//		Integer aa = a; 	// 원시타입 ==> 오토박싱(auto boxing) ==> 객체타입
//		a = aa; 	// 객체타입 ==> 오토언박싱(auto unboxing) ==> 원시타입
//		
//		Number bb= new Integer(100);
//		int b = (int)bb;
//		
//		double x = add(2,3);
//	
//	}
//
//	private static double add(int i, Number j) {
//		
//		return  i+j.doubleValue();
//	}
//	
//}


Java Runtime Enviroment 

jdk안에 
jre안에
jvm


////0-3
//import java.util.ArrayList;
//import java.util.Collections;
//import java.util.Comparator;
//import java.util.Iterator;
//import java.util.function.Predicate;
//
//
//public class ArrayListEx1_Test {
//
//	public static void main(String[] args) {
//
//		// 문자열 다수(개수는 매번 달라짐)를 한꺼번에 보관한다.
//		// 오름차순 정렬(순서가 보장되어야 함)을 한 후 출력해 본다.
//		
//		
//		ArrayList<String> names = new ArrayList<String>();
//		names.add("Tom");
//		names.add("Chris");
//		names.add("Mina");
//		
//		System.out.println(names.size());
//		
//		for ( String n : names ) {
//			System.out.print(n+" ,");
//		}
//		System.out.println("");
//		
//		System.out.println(names.toString());
//		System.out.println(names.get(names.size()-1));
//		
//		System.out.println(" ");
//		
//		names.add("Iaan");
//		System.out.println(names.toString());
//		
//		Collections.sort(names); // 오름차순
//
//		// iterator : 반복 / 반복작업을 수행할 때 사용할 수 있는 컬렉션의 표준기준 
//		Iterator<String> iter = names.iterator();
//		
//		while (iter.hasNext()) {
//			System.out.print(iter.next()+" ");
//			
//		}
//		System.out.println(" ");
//		Comparator<Object> comparator = Collections.reverseOrder();
//		
//		// names가 가리키는 ArrayList<String> 객체가 보관하는
//		// <String> 문자열을 두 개씩 차례대로 꺼내서 
//		// comparator 객체의 int  compare(T o1, T o2); 라는 메소드에게
//		// 파라미터로 전달하여 큰 것과 작은 것을 구분한 다음 이를 바탕으로 정렬을 수행한다.
//		Collections.sort(names, comparator);
//		
//		System.out.println(names);
//		// [Tom, Mina, Iaan, Chris]
//		
//		names.remove("Chris");
//		System.out.println(names);
//		// [Tom, Mina, Iaan]
//		
//		names.remove(2);
//		System.out.println(names);
//		// [Tom, Mina]
//		
//		
//		// 문자열에 단어 a가 있으면 지워라.
//		// 메소드에게 전달하는 filter 로직을 수행하여  true이면 해당 데이터를 삭제한다.
//		Predicate<? super String> filter = new Filter();
//		// true/false 여부를 판단하는 Predicate 인터페이스 구현제의 
//		// 구현메소드 test를 사용하는것은 removeIf 메소드 내 로직이 처리한다.
//		names.removeIf(filter);
//
//		System.out.println(names);
//		// [Tom]
//
//	}
//}
//
//// Predicate : true or false 판단하여 서술 
//class Filter implements Predicate<String> {
//
//	@Override
//	public boolean test(String txt) {
//		// 문자열 안에 a라는 글자가 있다면 true를 리턴한다. ==> 해당 문자열은 삭제된다.
//		return txt.contains("a");
//		
//	}
//	
//}


////0-4
//package p630;
//
//import java.util.Arrays;
//
//public class p630 {
//
//	public static void main(String[] args) {
//		User u1 = new User("David", 30);
//		User u2 = new User("John", 20);
//		User u3 = new User("Brad", 40);
//		
//		User[] users = {u1, u2, u3};
//		print(users);
//		
//		Arrays.sort(users);
//		print(users);
//	}
//
//	private static void print(User[] users) {
//		for (User user : users) {
//			System.out.print(user + " ,");
//		}
//		System.out.println( );
//	}
//	
//	
//}
//
//class User implements Comparable<User> {
//	String name;
//	int age;
//	
//	public User(String name, int age) {
//		super();
//		this.name = name;
//		this.age = age;
//	}
//	
//	@Override
//	public  String toString() {
//		return "User {name=" + name +" ," + age + "}";
//		
//	}
//
//	@Override
//	public int compareTo(User o) {
//		if (this.age == o.age) {
//			return 0;
//			}
//		else if (this.age > o.age) {
//			return 1;
//			} 
//		else {
//			return -1;
//			}
//		
//	}
//	
//	
//}

