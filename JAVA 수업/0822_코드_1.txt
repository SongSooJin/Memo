2018/08/22

자바 수업_코드_1

////0-1
//package helllo;
//
//public class Hello {
//
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub
//		System.out.println("Hello World!!");
//		
//		if (args != null) {
//			for(String txt : args) {
//				System.out.print(txt+" ");
//			}
//		}
//		
//		/*
//		 * 2. 변수
//		 *  정수 : int
//		 *  실수 : double
//		 *  불린 : boolean
//		 *  
//		 *  문자열 : String
//		 *  배열 : 자료형[]
//		 *  참조(객체) : class 클래스명 
//		 *  
//		 *  3. 연산자
//		 *  + - / * %
//		 *  A == B, A != B 
//		 *  A >= B, A <= B
//		 *  
//		 *  4. 조건문 반복문
//		 *  if - else if - else / switch ,삼항연산자 (true ? A : B)
//		 *  for / while / do - while / break / continue 
//		 *  
//		 *  5. 배열
//		 *  배열 : 자료형[]
//		 *  
//		 *  6.객체지향 
//		 *  class == new ==> Object(객체)
//		 *  클래스 (설계도) = 변수 + 메소드
//		 *  
//		 *  상속 : class A extends B == 클래스 A는 B의 상속이다.
//		 *  메소드 오버로딩  : 메소드명은 같고 파라미터가 다르면 메소드 호출을 구분해서 연동하는 기술]
//		 *  							why?  
//		 *  메소드 오버라이딩 :  부모가 정의한 메소드를 재정의 하여 사용하는 기술 
//		 *  생성자 : new class()  / 인스턴트가 생성될때 호출되는 '인스턴스 초기화 메소드'
//		 *  
//		 *  접근제어자 : 
//		 *  private : 클래스 안에서만 사용
//		 *  (dafault) : 같은 패키지 안에서만 사용
//		 *  protected : 같은 패키지 + 상속관계 일때만 사용
//		 *  public : 누구나 사용 가능
//		 *
//		 * 다형성 : 객체의 실체는 변함이 없으나 필요에 따라서 객체를 지칭하는 방법을 변경하여
//		 *  			객체가 가진 변수의 은닉과 메소드의 재사용을 이용하는 기술 
//		 *  
//		 *  인터페이스 : interface 인터페이스명
//		 *   - 추상메소드
//		 *   - static 메소드 , 변수 // java 8 
//		 *   - default  메소드 // java 8
//		 *  추상클래스 : abstract class 클래스명
//		 *   - 일반 클래스 능력 + 추상 메소드 (바디({ })가 없는 메소드)  
//		 *  ---------------------------------------------
//		 *  클래스 : class 클래스명
//		 *  
//		 *  
//		 *  
//		 *   */
//	}
//
//}


////0-2
//package p415;
//
//public class P415 {
//
//	public static void main(String[] args) {
//		int result = divide(3,0);
//		// divide 메소드를 호출했는데 메소드 처리중에 예외가 발생했고
//		// throw e; 라는 코드로 발생된 예외정보를 갖고 있는 객체를
//		// 전달하면 divide 메소드를 호출한 코드 부분에서 예외가 발생된
//		// 것으로 취급한다.  try ~ catch 구문이 없으면 자동으로
//		// throw e; 코드가 있는것과 같다.
//		// JVM에게 예외가 전달되면 콘솔에 빨간색으로 예외를 출력한다.
//		System.out.println("result = " + result);
//	}
//	
//	private static int divide(int i, int j) {
//		int result = 0;
//		try {
//			result =i / j ;
//			} 
//		catch  (RuntimeException e) {
//			// ArithmeticException e / 컨트롤 f4
//			/*
//			e.printStackTrace(); // 코드처리출력해봐
//			java.lang.ArithmeticException: / by zero
//			at p415.P415.divide(P415.java:13)
//			at p415.P415.main(P415.java:6)
//			*/
//			//System.out.println(e.getMessage());
//			
//			throw e; // 예외를 이 메소드를 호출한 측으로 전달한다.
//			}
//		return  result;
//	}
//}
//
///*
// * Object
// * 		Throwable : 예외 전파 
// * 			Exception : checked Exception
// * 							Exception 클래스와 자식 예외클래스가 발생하면
// * 							개발자가 반드시 try ~ catch 해야 한다.
// * 				RuntimeException : unchecked Exception
// * 											try ~ catch는 선택사항.
// * 					ArithmeticException : 
// * 
// * */


////0-3
//package p436;
//
//import java.util.Scanner;
//// import java.lang.System;
//// java.lang 밑에 클래스들은 너무나 중요하고 언제나 사용하기 때문에 
//// 임포트 구문을 생략해도 임포트 선언이 된 것으로 인정한다.
//
//public class P436 {
//	public static void main(String[] args) {
//
//		try (Scanner scan = new Scanner(System.in);) {
//				System.out.print("input : ");
//	
//				String input = scan.nextLine();
//				System.out.println(input);
//	
//				//scan.close(); // 자동자원 방법으로 생략이 가능하다.
//			} 
//		catch (Exception e) {
//			}
//
//	}
//}


////0-4
//package p465;
//
//public class p465 {
//
//	public static void main(String[] args) {
//		String a = "a";
//		String b = "b";
//		
//		a = a + b;
//
//	}
//
//}

