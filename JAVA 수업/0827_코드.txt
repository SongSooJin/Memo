2018/08/27

자바수업_코드

volatile 
// 휘발성 : (CPU)코어의 캐시로부터 값을 가져오지 말고 메모리에서 값을 
// 매번 가져다가 사용함을보장한다.

////13-27
//import java.util.concurrent.*;
//
//class ForkJoinEx1 {
//	static final ForkJoinPool pool = new ForkJoinPool();  // 쓰레드풀을 생성
//
//	public static void main(String[] args) {
//		long from = 1L;
//		long to   = 100_000_000L;
//
//		SumTask task = new SumTask(from, to);
//
//		long start = System.currentTimeMillis(); // 시작시간 초기화
//		Long result = pool.invoke(task);
//
//		System.out.println("Elapsed time(4 Core):"+(System.currentTimeMillis()-start));
//		System.out.printf("sum of %d~%d=%d%n", from, to, result);
//		System.out.println();
//
//		result = 0L;
//		start = System.currentTimeMillis(); // 시작시간 초기화
//		for(long i=from;i<=to;i++)
//			result += i;
//
//		System.out.println("Elapsed time(1 Core):"+(System.currentTimeMillis()-start));
//		System.out.printf("sum of %d~%d=%d%n", from, to, result);
//	} // main의 끝
//}
//
//class SumTask extends RecursiveTask<Long> {
//	long from;
//	long to;
//
//	SumTask(long from, long to) {
//		this.from = from;
//		this.to    = to;
//	}
//
//	public Long compute() {
//		long size = to - from; // form <= size <= to 
//
//		// if(5000 <= size)
//		if(size <= 5)     // 더할 숫자가 5개 이하면
//			return sum(); // 숫자의 합을 반환
//
//		long half = (from+to)/2;
//
//		// 범위를 반으로 나눠서 두 개의 작업을 생성
//		SumTask leftSum  = new SumTask(from, half);
//		SumTask rightSum = new SumTask(half+1, to);
//
//		leftSum.fork();
//		// 해당 작업을 스레드 폴의 작업 큐에 넣는다. 비기동 메소드
//		
//		return rightSum.compute() + leftSum.join();
//		// 해당 작업의 수행이 끝날 때까지 기다렸다가 수행이 끝나면 그 결과를 반환한다.
//	}
//
//	long sum() { // from~to의 모든 숫자를 더한 결과를 반환
//		long tmp = 0L; 
//
//		for(long i=from;i<=to;i++)
//			tmp += i;
//
//		return tmp;
//	}
//}


////0-1
//package p794;
//
//
//public class p794 {
//
//	public static void main(String[] args) {
//		
//		String who = Thread.currentThread().getName();
//		System.out.println("start who: " + who);
//		
//		Worker worker = new Worker();
//		// worker.run();
//		
//		Thread mThread = new Thread(worker, " A ");
//		mThread.start();
//		
//		System.out.println("end who : " + who);
//		
//	}
//
//}
//
//class Worker implements Runnable {
//
//	@Override
//	public void run() {
//		String who = Thread.currentThread().getName();
//		System.out.println( "run who : " + who);
//		
//		for (int i = 0; i < 10; i++) {
//			System.out.print(i);
//			
//			try {
//				Thread.sleep(500);
//				} 
//			catch (InterruptedException ignore) {
//			}
//			
//		}
//		
//	}
//	
//	
//}


////0-2
//package p794;
//
//public class p794_2 {
//
//	// 인터페이스가 제안하는 기능을 갖춘 클래스로 만든 객체를 할당한다.
//	// ? implements Runnable 
//	static Runnable mRunnable = new Runnable() { 
//		// 클래스명이 없다. 익명클래스(Anonymous Class)
//		// 인터페이스가 new 안되는 이유 추상메소드 때문에 
//		@Override
//		public void run() {
//		}
//	};
//	
//	public static void main(String[] args) {
//	
//		// Runnable worker = new Worker2();
//
//		// Thread mThread = new Thread(new Worker2(), " A ");
//		// mThread.start();
//		
//		// 스레드를 위한 클래스를 따로 만들지 않고 사용할 수 있는 방법
//		Thread mThread = new Thread (new Runnable() {
//			@Override
//			public void run() {
//				String who = Thread.currentThread().getName();
//				System.out.println( "run who : " + who);
//				
//				for (int i = 0; i < 10; i++) {
//					System.out.print(i);
//					
//					try {
//						Thread.sleep(500);
//						} 
//					catch (InterruptedException ignore) {
//					}
//					
//				}
//			}
//		}, " A ");
//		 mThread.start();
//	}
//
//}
//
//class Worker2 implements Runnable { // 클래스명이 존재 
//
//	@Override
//	public void run() {
//		String who = Thread.currentThread().getName();
//		System.out.println( "run who : " + who);
//		
//		for (int i = 0; i < 10; i++) {
//			System.out.print(i);
//			
//			try {
//				Thread.sleep(500);
//				} 
//			catch (InterruptedException ignore) {
//			}
//			
//		}
//		
//	}
//	
//	
//}


////0-3
//package p794;
//
//public class P764_3 {
//
//	public static void main(String[] args) {
////		// #1 class  MyThread extends Thread
//		Thread t1 = new MyThread();
//		t1.setName("A");
//		t1.start();
//		
//		// #1의 변형
//		// class  익명클래스 extends Thread 
//		new Thread("a") {
//			@Override
//			public void run() {
//				try {
//					MyCounter.count(Thread.currentThread().getName());
//				} catch (InterruptedException ignore) {
//				}
//			}
//		}.start();
//		
//		// #2
//		
//		new Thread(new MyRunnable(), "B").start();
//		
//		// #2의 변형
//		// class 익명클래스 implements Runnable
//		new Thread(new Runnable() {
//			
//			@Override
//			public void run() {
//				try {
//					MyCounter.count(Thread.currentThread().getName());
//				} catch (InterruptedException ignore) {
//				}		
//			}
//		},"b").start();
//		
//		// 메인 스레드
//		try {
//			MyCounter.count(Thread.currentThread().getName());
//		} catch (InterruptedException ignore) {
//		}
//		
//	}
//}
//
//class  MyThread extends Thread {
//	
//	@Override
//	public void run() {
//		
//		try {
//			MyCounter.count(Thread.currentThread().getName());
//		} catch (InterruptedException ignore) {
//		}
//	
//	}
//	
//}
//
//class MyRunnable implements Runnable {
//
//	@Override
//	public void run() {
//		try {
//			MyCounter.count(Thread.currentThread().getName());
//		} catch (InterruptedException ignore) {
//		}
//	
//		
//	}
//	
//}
//
//class MyCounter {
//	public static void count(String who) throws InterruptedException {
//		for (int i = 0; i < 10; i++) {
//			System.out.print(who + i + " ");
//			Thread.sleep(500);
//		}
//		
//	}
//}


////0-4
//package p794;
//
//public class P764_4 {
//
//	// Lambda Expression
//	// 함수를 하나의 식으로 표현하는 것이다.
//	// 함수? 하나의 객체에 하나의 메소드만 존재할 때 해당 메소드를 함수로 지칭한다.
//	// 함수형 인터페이스 구현체를 간단하게 식으로 줄여서 쓸 수 있는 표현법 
//	public static void main(String[] args) {
//		
//		// #1의 변형
//		// class  익명클래스 extends Thread 
//		new Thread("a") {
//			@Override
//			public void run() {
//				try {
//					MyCounter4.count(Thread.currentThread().getName());
//				} catch (InterruptedException ignore) {
//				}
//			}
//		}.start();
//		
//	
//		// #2의 변형
//		// class 익명클래스 implements Runnable
//		new Thread(new Runnable() {
//			@Override
//			public void run() {
//				try {
//					MyCounter4.count(Thread.currentThread().getName());
//				} catch (InterruptedException ignore) {
//				}		
//			}
//		},"b").start();
//		
//		// #2의 변형의 람다식 
//		// 클래스명과 메소드명을 생략할 수 있다. 
//		// 컴파일러가 주변 코드를 보고 맥락을 이해서 생략된
//		// 클래스명과 메소드명을 추론할 수 있기 때문이다.
//		new Thread(() -> {
//			try {
//				MyCounter4.count(Thread.currentThread().getName());
//			} catch (InterruptedException ignore) {
//			}		
//		},"b-Lambda").start();
//	}
//	
//}
//
//class MyCounter4 {
//	public static void count(String who) throws InterruptedException {
//		for (int i = 0; i < 10; i++) {
//			System.out.print(who + i + " ");
//			Thread.sleep(500);
//		}
//		
//	}
//}


////14-1
////14-1
//@FunctionalInterface
//interface MyFunction {
//	void run();  // public abstract void run();
//}
//
//@FunctionalInterface
//interface Adder {
//	int add (int a , int b);
//}
//
//class LambdaEx1 {
//	
//	static int proceed(Adder adder, int a , int b) {
//		return adder.add(a, b);
//	} 
//	
//	static void execute(MyFunction f) { // 매개변수의 타입이 MyFunction인 메서드
//		f.run();
//	}
//
//	static MyFunction getMyFunction() { // 반환 타입이 MyFunction인 메서드 
//		MyFunction f = () -> System.out.println("f3.run()");
//		return f;
//	}
//
//	public static void main(String[] args) {
//		
////		Adder adder = new Adder() {
////			@Override
////			public int add(int a, int b) {
////				return a+b;
////			}
////		};
////		
////		int result = proceed(adder,2,3);
////		System.out.println("result = " + result);
//		
//		// 람다식 / -> 화살표 연산자 
////		int result = proceed((int a , int b) -> {
////			return a+b; 
////		}, 2, 3);
////		System.out.println("result = " + result);
//		
//		//람다식의 변형-1
//		// {} 바디연산자를 생략하면 자동으로 return이 된다.
////		int result = proceed((int a , int b) -> a+b, 2, 3);
//		// ( a, b) -> a+b => 객체 
//		int result = proceed(( a, b) -> a+b, 2, 3);
//		System.out.println("result = " + result);
//		
//		
//		
////		int result = proceed(new Adder() {
////			
////			@Override
////			public int add(int a, int b) {
////				return a+b;
////			}
////		}, 2, 3);
////		
////		System.out.println("result = " + result);
//		
//		
//		// 람다식으로 MyFunction의 run()을 구현
//		MyFunction f1 = ()-> System.out.println("f1.run()");
//
//		MyFunction f2 = new MyFunction() {  // 익명클래스로 run()을 구현
//			public void run() {   // public을 반드시 붙여야 함
//				System.out.println("f2.run()");
//			}
//		};
//
//		MyFunction f3 = getMyFunction();
//
//		f1.run();
//		f2.run();
//		f3.run();
//
//		execute(f1);
//		execute( ()-> System.out.println("run()") );
//	}
//}


////14-2
//@FunctionalInterface
//interface MyFunction2 {
//	void myMethod();  // public abstract void myMethod();
//}
//
//class LambdaEx2 {
//	public static void main(String[] args) 	{
//		MyFunction2 f = ()->{}; // MyFunction f = (MyFunction)(()->{}); / 람다식
//		Object obj = (MyFunction2)(()-> {});  // Object타입으로 형변환이 생략됨
//		String str = ((Object)(MyFunction2)(()-> {})).toString();
//
//		System.out.println(f);
//		System.out.println(obj);
//		System.out.println(str);
//
////		System.out.println(()->{});	// 에러. 람다식은 Object타입으로 형변환 안됨
//		System.out.println((MyFunction2)(()-> {}));
////		System.out.println((MyFunction)(()-> {}).toString()); // 에러
//		System.out.println(((Object)(MyFunction2)(()-> {})).toString());
//	}
//}


////14-3
//@FunctionalInterface
//interface MyFunction3 {
//	void myMethod();
//}
//
//class Outer {
//	int val=10;	// Outer.this.val				
//
//	class Inner {
//		int val=20;	// this.val
//
//		void method(int i) {  // 	void method(final int i) {
//			int val=30; // final int val=30;
////			i = 10;      // 에러. 상수의 값을 변경할 수 없음.
//
//			MyFunction3 f = () -> {
//				System.out.println("             i :" + i);
//				System.out.println("           val :" + val);
//				System.out.println("      this.val :" + ++this.val);
//				System.out.println("Outer.this.val :" + ++Outer.this.val);	
//			};
//
//			f.myMethod();
//		}
//	} // Inner클래스의 끝
//} // Outer클래스의 끝
//
//class LambdaEx3 {
//	public static void main(String args[]) {
//		Outer outer = new Outer();
//		Outer.Inner inner = outer.new Inner();
//		inner.method(100);
//	}
//}


////14-4
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.Map;
//import java.util.function.Consumer;
//// Lambda(람다) : 객체하나 메소드하나
//class LambdaEx4 {
//	
//	public static void main(String[] args) 	{
//		
//		ArrayList<Integer> list = new ArrayList<>();
//		for(int i=0;i<10;i++)
//			list.add(i);
//		
//		for (Integer i : list) {
//			System.out.print(i + ",");
//		}
//		System.out.println("\n-----------------");
//	
//		Consumer<Integer> action = new Consumer<Integer>() {
//			@Override
//			public void accept(Integer i) {
//				System.out.print(i+",");
//			}
//		};
//		
//		// list의 모든 요소를 출력
//		list.forEach(action);
//		System.out.println();
//		
//		list.forEach(i->System.out.print(i+",")); // 반복 꺼내서 쓰자 
//		System.out.println();
//		
//		System.out.println("\n-----------------");
//
//		// list에서 2 또는 3의 배수를 제거한다.
//		// 객체지향 프로그래밍 VS 함수형 프로그램
//		// 함수형 프로그래밍은 함수를 순수한 상태로 분리한 다음
//		// 조립해서 사용한는 기술로 로직의 재 사용성을 극대화할 수 있는 기술이다.
//		// 객체지향 프로그래밍에서 자주 사용한는 유틸 클래스와 비슷하며
//		// 함수 재 사용성을 극대화 하기 위해서 객체 당 하나의 메소드만 배치하는
//		// 형태를 띄게 된다.
//		list.removeIf(x -> x%2==0 || x%3==0); // 실체는 객체 
//		System.out.println(list);
//
//		list.replaceAll(i->i*10); // list의 각 요소에 10을 곱한다. // 값을 바꿀수 있음
//		System.out.println(list);
//
//		Map<String, String> map = new HashMap<>();
//		map.put("1", "1");
//		map.put("2", "2");
//		map.put("3", "3");
//		map.put("4", "4");
//
//		// map의 모든 요소를 {k,v}의 형식으로 출력한다.
//		map.forEach((k,v)-> System.out.print("{"+k+","+v+"},"));
//		System.out.println();
//		
//	}
//	
//}


////0-5
//package p794;
//
//public class Test {
//
//	public static void main(String[] args) {
//
//		// =Worker worker = new Worker();
//		// Runnable로 쓴것 : 기능적면을 더 집중하기 위해
//		Runnable worker1 = new Worker();
//		// =Thread t = new java.lang.Thread();
//		Thread t1 = new Thread(worker1);
//		t1.start();
//
//		Runnable worker2 = new Worker();
////		Thread t2 = new Thread(worker2);
////		t2.start();
//		new Thread(worker2).start();
//
//		new Thread(new Runnable() {
//			@Override
//			public void run() {
//				String name = Thread.currentThread().getName();
//				for (int i = 0; i < 10; i++) {
//					System.out.println(name + " i = " + i);
//				}
//			}
//		}).start();
//
//		new Thread(() -> {
//			String name = Thread.currentThread().getName();
//			for (int i = 0; i < 10; i++) {
//				System.out.println(name + " i = " + i);
//			}
//		}).start();
//	}
//
//}
//
//class Worker implements Runnable {
//	@Override
//	public void run() {
//		String name = Thread.currentThread().getName();
//		for (int i = 0; i < 10; i++) {
//			System.out.println(name + " i = " + i);
//		}
//	}
//
//}
//
//// Programming Language


////14-5
//import java.util.function.*;
//import java.util.*;
//
//class LambdaEx5 {
//	public static void main(String[] args) {
//		
//		Supplier<Integer> s1 = new Supplier<Integer>() {
//			@Override
//			public Integer get() {
//				return (int)(Math.random()*100)+1;
//			}
//		};
//		
//		// 파라미터 무 , 리턴 유, 리턴자료형은 <지네릭형>
//		Supplier<Integer>  s = () -> (int)(Math.random()*100)+1;
//		
//		// 파라미터 유, 리턴 무, 파라미터 자료형은 <지네릭형>
//		Consumer<Integer>  c = i -> System.out.print(i+", "); 
//		
//		// 파라미터 유, 리턴 유, 파라미터 자료형은 <지네릭형> 
//		// 리턴 값은 true or false
//		Predicate<Integer> p = i -> i%2==0; 
//		
//		// 파라미터 유, 리턴 유, 리턴 값은 <파라미터 자료현, 리턴 자료형>
//		Function<Integer, Integer> f = i -> i/10*10; // i의 일의 자리를 없앤다.
//
//		List<Integer> list = new ArrayList<>();	
//		makeRandomList(s, list);
//		System.out.println(list);
//		printEvenNum(p, c, list);
//		List<Integer> newList = doSomething(f, list);
//		System.out.println(newList);
//	}
//
//	static <T> List<T> doSomething(Function<T, T> f, List<T> list) {
//		List<T> newList = new ArrayList<T>(list.size());
//
//		for(T i : list) {
//			newList.add(f.apply(i));
//		}	
// 
//		return newList;
//	}
//
//	static <T> void printEvenNum(Predicate<T> p, Consumer<T> c, List<T> list) {
//		System.out.print("[");
//		for(T i : list) {
//			if(p.test(i))
//				c.accept(i);
//		}	
//		System.out.println("]");
//	}
//
//	static <T> void makeRandomList(Supplier<T> s, List<T> list) {
//		for(int i=0;i<10;i++) {
//			list.add(s.get());
//		}
//	}
//}

////0-6
//package p670;
//
//public class p670 {
//
//	public static void main(String[] args) {
//		System.out.println(Caculator.add(2, 3));
//		System.out.println(Caculator.add((int)2.0, 3));
//		System.out.println(Caculator.add(2, (int)3.0F));
//	}
//
//}
//
//class Caculator {
//	public static int add(int a, int b) {
//		return a+b;
//	}
//	
////	public static double add(double a, int b) {
////		return a+b;
////	}
////	public static float add(int a, float b) {
////		return a+b;
////	}
//
//
//}
//
//


////0-7
//package p670;
//
//public class p670_1 {
//
//	public static void main(String[] args) {
//		Caculator2 <Integer> calc = new Caculator2<Integer>();
//		
//		System.out.println( calc.add(2, 3));
//		
//		System.out.println( new Caculator2<Double>().add(2.0, 3.0));
//		System.out.println( new Caculator2<Float>().add(2F, 3.0F));
//	}
//
//}
//
//// <T> : T-type 취급하는 자료형을 사용자가 결정해야 한다.
//// 지네릭은 static 안됨
//class Caculator2 <T> {
//	public T add(T a, T b) {
//		
//		return a;
//	}
//	
////	public static double add(double a, int b) {
////		return a+b;
////	}
////	public static float add(int a, float b) {
////		return a+b;
////	}
//
//
//}
//
//


////12-1
//import java.util.ArrayList;
//
//class Fruit {
//	public String toString() {
//		return "Fruit";
//	}
//}
//
//class Apple extends Fruit {
//	public String toString() {
//		return "Apple";
//	}
//}
//
//class Grape extends Fruit {
//	public String toString() {
//		return "Grape";
//	}
//}
//
//class Toy {
//	public String toString() {
//		return "Toy";
//	}
//}
//
//class FruitBoxEx1 {
//	public static void main(String[] args) {
//		Box<Fruit> fruitBox = new Box<Fruit>();
//		Box<Apple> appleBox = new Box<Apple>();
//		Box<Toy> toyBox = new Box<Toy>();
////		Box<Grape> grapeBox = new Box<Apple>(); // 에러. 타입 불일치
//
////		fruitBox.add(new Fruit());
////		appleBox.add(new Apple());
////		appleBox.add(new Toy());
//	
//		fruitBox.add(new Fruit());
//		fruitBox.add(new Apple()); // OK. void add(Fruit item)
//
//		appleBox.add(new Apple());
//		appleBox.add(new Apple());
////		appleBox.add(new Toy()); // 에러. Box<Apple>에는 Apple만 담을 수 있음
//
//		toyBox.add(new Toy());
////		toyBox.add(new Apple()); // 에러. Box<Toy>에는 Apple을 담을 수 없음
//
//		System.out.println(fruitBox);
//		System.out.println(appleBox);
//		System.out.println(toyBox);
//	} // main의 끝
//}
//
//// T는 fruit
//class Box<T> {
//	ArrayList<T> list = new ArrayList<T>();
//
//	void add(T item) {
//		list.add(item);
//	}
//
//	T get(int i) {
//		return list.get(i);
//	}
//
//	int size() {
//		return list.size();
//	}
//
//	public String toString() {
//		return list.toString();
//	}
//}


////12-2
//import java.util.ArrayList;
//
//class Fruit2 implements Eatable {
//	public String toString() { return "Fruit";}
//}
//class Apple2 extends Fruit2 { public String toString() { return "Apple";}}
//class Grape2 extends Fruit2 { public String toString() { return "Grape";}}
//class Toy2		           { public String toString() { return "Toy"  ;}}
//
//interface Eatable {}
//
//class FruitBoxEx2 {
//	public static void main(String[] args) {
//		FruitBox2<Fruit2> fruitBox = new FruitBox2<Fruit2>();
//		FruitBox2<Apple2> appleBox = new FruitBox2<Apple2>();
//		FruitBox2<Grape2> grapeBox = new FruitBox2<Grape2>();
////		FruitBox2<Grape> grapeBox = new FruitBox2<Apple>(); // 에러. 타입 불일치
////		FruitBox2<Toy>   toyBox    = new FruitBox2<Toy>();   // 에러.
//
//		fruitBox.add(new Fruit2());
//		fruitBox.add(new Apple2());
//		fruitBox.add(new Grape2());
//		appleBox.add(new Apple2());
////		appleBox.add(new Grape2());  // 에러. Grape는 Apple의 자손이 아님
//		grapeBox.add(new Grape2());
//
//		System.out.println("fruitBox-"+fruitBox);
//		System.out.println("appleBox-"+appleBox);
//		System.out.println("grapeBox-"+grapeBox);
//	}  // main
//}
//
//class FruitBox2<T extends Fruit2 & Eatable> extends Box2<T> {}
//
//class Box2<T> {
//	ArrayList<T> list = new ArrayList<T>();
//	void add(T item)  { list.add(item);      }
//	T get(int i)      { return list.get(i); }
//	int size()        { return list.size();  }
//	public String toString() { return list.toString();}
//}


////12-4
//import java.util.*;
//
//class Fruit4	{
//	String name;
//	int weight;
//	
//	Fruit4(String name, int weight) {
//		this.name   = name;
//		this.weight = weight;
//	}
//
//	public String toString() { return name+"("+weight+")";}
//	
//}
//
//class Apple4 extends Fruit4 {
//	Apple4(String name, int weight) {
//		super(name, weight);
//	}
//}
//
//class Grape4 extends Fruit4 {
//	Grape4(String name, int weight) {
//		super(name, weight);
//	}
//}
//
//class AppleComp implements Comparator<Apple4> {
//	public int compare(Apple4 t1, Apple4 t2) {
//		return t2.weight - t1.weight;
//	}
//}
//
//class GrapeComp implements Comparator<Grape4> {
//	public int compare(Grape4 t1, Grape4 t2) {
//		return t2.weight - t1.weight;
//	}
//}
//
//class FruitComp implements Comparator<Fruit4> {
//	public int compare(Fruit4 t1, Fruit4 t2) {
//		return t1.weight - t2.weight;
//	}
//}
//
//class FruitBoxEx4 {
//	public static void main(String[] args) {
//		FruitBox4<Apple4> appleBox = new FruitBox4<Apple4>();
//		FruitBox4<Grape4> grapeBox = new FruitBox4<Grape4>();
//
//		appleBox.add(new Apple4("GreenApple", 300));
//		appleBox.add(new Apple4("GreenApple", 100));
//		appleBox.add(new Apple4("GreenApple", 200));
//
//		grapeBox.add(new Grape4("GreenGrape", 400));
//		grapeBox.add(new Grape4("GreenGrape", 300));
//		grapeBox.add(new Grape4("GreenGrape", 200));
//
//		Collections.sort(appleBox.getList(), new AppleComp());
//		Collections.sort(grapeBox.getList(), new GrapeComp());
//		System.out.println(appleBox);
//		System.out.println(grapeBox);
//		System.out.println();
//		Collections.sort(appleBox.getList(), new FruitComp());
//		Collections.sort(grapeBox.getList(), new FruitComp());
//		System.out.println(appleBox);
//		System.out.println(grapeBox);
//	}  // main
//}
//
//class FruitBox4<T extends Fruit4> extends Box4<T> {}
//
//class Box4<T> {
//	ArrayList<T> list = new ArrayList<T>();
//
//	void add(T item) {
//		list.add(item);
//	}
//
//	T get(int i) {
//		return list.get(i);
//	}
//
//	ArrayList<T> getList() { return list; }
//
//	int size() {
//		return list.size();
//	}
//
//	public String toString() {
//		return list.toString();
//	}
//}

////12-5
//enum Direction { // 부모 클래스는 Enum
//	// 상수 : public static final
//	// 순서대로 기수가 붙는다. 0,1,2...
//	// 하나하나의 객체
//	EAST, SOUTH, WEST, NORTH
//}
//
//class EnumEx1 {
//
//	// 멤버변수
//	public static final int EAST = 0;
//	public static final int SOUTH = 1;
//	public static final int WEST = 2;
//	public static final int NORTH = 3;
//
//	public static void main(String[] args) {
//
//		// d1이 가리키는 것은 Direction 클래스의 자식 객체이다.
//		Direction d1 = Direction.EAST;
//		Direction d2 = Direction.valueOf("WEST");
//		Direction d3 = Enum.valueOf(Direction.class, "EAST");
//
//		System.out.println("d1=" + d1);
//		System.out.println("d2=" + d2);
//		System.out.println("d3=" + d3);
//
//		System.out.println("d1==d2 ? " + (d1 == d2));
//		System.out.println("d1==d3 ? " + (d1 == d3));
//		System.out.println("d1.equals(d3) ? " + d1.equals(d3));
////		System.out.println("d2 > d3 ? "+ (d1 > d3)); // 에러
//		System.out.println("d1.compareTo(d3) ? " + (d1.compareTo(d3)));
//		System.out.println("d1.compareTo(d2) ? " + (d1.compareTo(d2)));
//
//		switch (d1) {
//		case EAST: // Direction.EAST라고 쓸 수 없다.
//			System.out.println("The direction is EAST.");
//			break;
//		case SOUTH:
//			System.out.println("The direction is SOUTH.");
//			break;
//		case WEST:
//			System.out.println("The direction is WEST.");
//			break;
//		case NORTH:
//			System.out.println("The direction is NORTH.");
//			break;
//		default:
//			System.out.println("Invalid direction.");
////				break;
//		}
//
//		Direction[] dArr = Direction.values();
//
//		for (Direction d : dArr) // for(Direction d : Direction.values())
//			System.out.printf("%s=%d%n", d.name(), d.ordinal());
//	}
//}


////12-6
//enum Direction2 {
//	EAST(1, ">"), SOUTH(2, "V"), WEST(3, "<"), NORTH(4, "^");
//
//	private static final Direction2[] DIR_ARR = Direction2.values();
//	private final int value;
//	private final String symbol;
//
//	Direction2(int value, String symbol) { // private Direction(int value)
//		this.value = value;
//		this.symbol = symbol;
//	}
//
//	public int getValue() {
//		return value;
//	}
//
//	public String getSymbol() {
//		return symbol;
//	}
//
//	public static Direction2 of(int dir) {
//		if (dir < 1 || dir > 4) {
//			throw new IllegalArgumentException("Invalid value :" + dir);
//		}
//		return DIR_ARR[dir - 1];
//	}
//
//	// 방향을 회전시키는 메서드. num의 값만큼 90도씩 시계방향으로 회전한다.
//	public Direction2 rotate(int num) {
//		num = num % 4;
//
//		if (num < 0)
//			num += 4; // num이 음수일 때는 시계반대 방향으로 회전
//
//		return DIR_ARR[(value - 1 + num) % 4];
//	}
//
//	public String toString() {
//		return name() + getSymbol();
//	}
//} // enum Direction
//
//class EnumEx2 {
//	public static void main(String[] args) {
//		for (Direction2 d : Direction2.values())
//			System.out.printf("%s=%d%n", d.name(), d.getValue());
//
//		Direction2 d1 = Direction2.EAST;
//		// 개발자가 기수를 주고 해당하는 상수객체를 얻는다.
//		Direction2 d2 = Direction2.of(1);
//
//		System.out.printf("d1=%s, %d%n", d1.name(), d1.getValue());
//		System.out.printf("d2=%s, %d%n", d2.name(), d2.getValue());
//
//		System.out.println(Direction2.EAST.rotate(1));
//		System.out.println(Direction2.EAST.rotate(2));
//		System.out.println(Direction2.EAST.rotate(-1));
//		System.out.println(Direction2.EAST.rotate(-2));
//	}
//}


////0-7
//package p702;
//
///**
// * <b>클래스를 설명하는 API 문서작성을 위한 주석 </b>
// * 
// * @author 내이름 Soo Jin SONG
// * @see     java.lang.Thread
// * @see     java.util.concurrent.Callable
// * @since   2018.08.27
// */
//
//public class p702 {
//
//	/**
//	 *  메소드 설명
//	 *  
//     * @param args 시작 메소드의 파라미터를 주면 args 문자열 배열로 받는다.
//     * @throws ArithmeticException 기분이 우울하면 예외가 발생합니다.
//     * @since 1.8
//
//	 */
//	
//	public static void main(String[] args) {
//
//		// 한줄 주석
//		Math.random();
//		/*
//		 * 범위 주석 
//		 */
//		
//		
//		
//	}
//
//}


////12-9
//// A개발자가 작성
//class Parent {
//	void parentMethod() {
//		System.out.println("Parent");
//	}
//}
//
//// B개발자가 작성
//class Child extends Parent {
//
//	// 애너테이션(주해)
//	// 소스코드안에 다른 프로그램을 위한 정보를 포함시키는 기술
//	@Override
//	void parentMethod() {
//		System.out.println("Child");
//	}
//}
//
////class Child extends Parent {
////	@Override
////	void parentmethod() { } // 조상 메서드의 이름을 잘못적었음. 
////}
//
//public class AnnotationEx1 {
//	public static void main(String[] agrs) {
//		Parent c = new Child();
//		((Child)c).parentMethod();
//	}
//}


////12-10
////  라이브러리 개발자 
//class NewClass {
//	int newField;
//
//	// 버전 2.0일때 새로운 메소드를 제공하면서
//	// 버전 1.0일때 메소드를 그만쓰께 하고 대신 새로운 메소드를 사용하라고 안내하고자 한다.
//	int getNewField() {
//		return newField;
//	}
//	
//// 버전이 1.0 아래 메소드를 제공
//	 @Deprecated
//	int oldField;
//
//	 @Deprecated
//	int getOldField() { 
//		return oldField;
//	}
//}
//
//// 라이브러리를 사용하는 개발자 
//class AnnotationEx2 {
//	public static void main(String args[]) {
//		NewClass nc = new NewClass();
//
//		nc.oldField = 10; // @Depreacted가 붙은 대상을 사용
//		System.out.println(nc.getOldField()); // @Depreacted가 붙은 대상을 사용
//	}
//}


////12-11
//import java.util.ArrayList;
//
//class NewClass2 {
//	int newField;
//
//	int getNewField() { 
//		return newField;
//	}	
//
//	@Deprecated
//	int oldField;
//
//	@Deprecated
//	int getOldField() { 
//		return oldField;
//	}
//}
//
//
//class AnnotationEx3 {
//	@SuppressWarnings("deprecation")     // deprecation관련 경고를 억제
//	public static void main(String args[]) {
//		NewClass2 nc = new NewClass2();
//
//		nc.oldField = 10;                     //@Depreacted가 붙은 대상을 사용
//		System.out.println(nc.getOldField()); //@Depreacted가 붙은 대상을 사용
//
//		// 괄호안에 있는것에 대한 경고를 보여주지마라 
//		@SuppressWarnings("unchecked")               // 지네릭스 관련 경고를 억제
//		ArrayList<NewClass2> list = new ArrayList<>();  // 타입을 지정하지 않음.
//		list.add(nc);
//	}
//}
//


////12-12
//import java.util.Arrays;
//
//class MyArrayList<T> {
//	T[] arr;
//
//	@SafeVarargs
//	@SuppressWarnings("varargs")
//	MyArrayList(T... arr) {
//		this.arr = arr;
//	}
//	
//	@SafeVarargs
////	@SuppressWarnings("unchecked")
//	public static <T> MyArrayList<T> asList(T... a) { 
//        return new MyArrayList<>(a);
//    }
//
//	public String toString() {
//		return Arrays.toString(arr);
//	}
//}
//
//class AnnotationEx4 {
////	@SuppressWarnings("unchecked")
//	public static void main(String args[]) {
//		MyArrayList<String> list = MyArrayList.asList("1","2","3");
//
//		System.out.println(list);
//	}
//}


////12-13
//import java.lang.annotation.*;
//
//@Deprecated
//@SuppressWarnings("1111") // 유효하지 않은 애너테이션은 무시된다.
//@TestInfo(testedBy = "aaa", testDate = @DateTime(yymmdd = "160101", hhmmss = "235959"))
//class AnnotationEx5 {
//	public static void main(String args[]) {
//		// AnnotaionEx5의 Class객체를 얻는다.
//		Class<AnnotationEx5> cls = AnnotationEx5.class;
//
//		TestInfo anno = (TestInfo) cls.getAnnotation(TestInfo.class);
//		System.out.println("anno.testedBy()=" + anno.testedBy());
//		System.out.println("anno.testDate().yymmdd()=" + anno.testDate().yymmdd());
//		System.out.println("anno.testDate().hhmmss()=" + anno.testDate().hhmmss());
//
//		for (String str : anno.testTools())
//			System.out.println("testTools=" + str);
//
//		System.out.println();
//
//		// AnnotationEx5에 적용된 모든 애너테이션을 가져온다.
//		Annotation[] annoArr = cls.getAnnotations();
//
//		for (Annotation a : annoArr)
//			System.out.println(a);
//	} // main의 끝
//}
//
//@Target(value = {
//		ElementType.TYPE, 	//  class, interface, enum
//		ElementType.FIELD, 	// 멤버변수
//		ElementType.METHOD,	// 멤버변수
//		ElementType.CONSTRUCTOR,	// 생성자
//		ElementType.PARAMETER, 	// 메소드의 파라미터 
//		
//})
//@Retention(RetentionPolicy.RUNTIME) // 실행 시에 사용가능하도록 지정
//@interface TestInfo {
//	// count 키 값으로 int를 받아서 보관한다.
//	// 단, 값을 안주면 대신 기본값으로 1을 보관하겠다.
//	int count() default 1;
//
//	String testedBy();
//
//	String[] testTools() default "JUnit";
//
//	TestType testType() default TestType.FIRST;
//
//	DateTime testDate();
//}
//
//// 애노테이션을 새로 만들면서 애노테이션 설정정보를 셋팅하기 위해서
////사용하는 메타정보를 가지고  애노테이션
////SOURCE(~.java 일때만 유지) ==> Class(~.class 컴파일 후에도 유지)==> RUNTIME(객체상태에서도 유지)
//@Retention(RetentionPolicy.RUNTIME) // 실행 시에 사용가능하도록 지정
//@interface DateTime {
//	//  yymmdd 키 값으로 String 값을 받아서 보관한다.
//	String yymmdd();
//
//	String hhmmss();
//}
//
//enum TestType {
//	FIRST, FINAL
//}


////0-8
//package day3;
//
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//// 인터페이스는 상수와 추상메소드만 쓸수 있다./ 수평적개념 / 인터페이스 자동 Public 
//// 공통적인 사항들 
//interface Emp {
//	static final String compName = "TopCredu";
//	// 추상메소드
//	public abstract void work();
//}
//
//// abstract : 어떤 클래스가 구체적이지 않을때
////abstract class Emp {
////	int empno; // 변수 : 어떤 클래스의 속성 ,상태를 나타냄
////
////	void gotoOffice() {
////		System.out.println(empno + "가(이) 출근합니다.");
////	}
////
////	// 추상메소드- 자식들이 너희에 맞게 써라 
////	// 추상메소드가 하나라도 있으면 클래스에도 반드시 붙어야함 (abstract)
////	abstract void work();
////	public String toString() {
////		return "[사번:" + empno + "]";
////	}
////}
//
//// class Emp {
////	int empno; // 변수 : 어떤 클래스의 속성 ,상태를 나타냄
////
////	Emp(int empno) {
////		this.empno = empno;
////	} // 생성자는 new할때 호출됨
////
////	Emp() {
////	}
////
////	void gotoOffice() {
////		System.out.println(empno + "가(이) 출근합니다.");
////	}
////
////	public String toString() {
////		return "[사번:" + empno + "]";
////	}
////}
//
//class Programmer implements Emp {
//	public void work() {
//		System.out.println(compName + " 프로그래머...Work");
//	}
//}
//
//class Designer implements Emp {
//	public void work() {
//		System.out.println(compName + " 디자이너...Work");
//	}
//}
//
////class Programmer extends Emp {
////	void work() {
////		System.out.println(empno + "은(는) 프로그래머...Work");
////	}
////}
////
////class Designer extends Emp {
////	void work() {
////		System.out.println(empno + "은(는) 디자이너...Work");
////	}
////}
//
//public class EmpTest {
//
//	public static void main(String[] args) {
//
//		Emp e1 = new Programmer();
//
//		Programmer p1 = new Programmer();
//		p1.work();
//
//		Emp d1 = new Designer();
//		((Designer) d1).work();
//
//		// 값 (value) 값이 Emp인데 왜 프로그램이 디자이너가 들어올수있나
//		// 자식 클래스는 완벽한 부모 클래스다.
//		Map<Integer, Emp> m1 = new HashMap<Integer, Emp>();
//		m1.put(1, new Programmer());
//		m1.put(2, new Designer());
//
//		System.out.println(m1);
//		
//		//  ArrayList  : 배열이지만 크기가 동적으로 늘어나는 배열 
//		// List : 인터페이스 
//		List<Emp> emps = new ArrayList<Emp>();
//		emps.add(new Programmer());
//		emps.add(new Designer());
//		
//		System.out.println(emps);
//		
//		// 추상 클래스는 new할수 없어 하지만 왼쪽에 데이터 타입으로는 올수있다.
////		Emp e1 = new Programmer();
////
////		// new 하게 되면 객체는 메모리 힙에 만들어 진다.
////		Programmer p1 = new Programmer();
////		// = Emp p1 = new Programmer();
////		// Programmer타입이 같아야함 p1의 타입은 Programmer.
////		// 왼쪽은 오른쪽보다 커야함
////		p1.gotoOffice();
////		p1.work();
////
////		// 다형성기반의 코딩
////		// 객체 기반의 다형성
////		Emp d1 = new Designer();
////		d1.gotoOffice();
////		((Designer) d1).work();
////
////		// Map => 엔트리 : (키, 값)
////		Map<Integer, Emp> m1 = new HashMap<Integer, Emp>();
////		m1.put(1, new Emp(1));
////		m1.put(2, new Emp(2));
////
////		System.out.println(m1.get(1));
//	}
//
//}

