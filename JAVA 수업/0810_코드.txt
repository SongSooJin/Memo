2018/08/10

자바 수업 _ 코드

////4-6
//import java.util.*;
//
//class FlowEx06 {
//	public static void main(String[] args) { 
//		int month = 0; // 관습적으로 0값이 1월을 의미한다.
//
//		System.out.print("현재 월을 입력하세요.>");
//
//		Scanner scanner = new Scanner(System.in);
//		String tmp = scanner.nextLine(); // 화면을 통해 입력받은 내용을 tmp에 저장
//		month = Integer.parseInt(tmp);   // 입력받은 문자열(tmp)을 숫자로 변환
//
//		switch(month) { // 조건문 자리에 숫자, 문자,문자열을 배치 할 수있다.
//			case 3: 
//			case 4: 
//			case 5:
//				System.out.println("현재의 계절은 봄입니다.");
//				break;
//			case 6: case 7: case 8:
//				System.out.println("현재의 계절은 여름입니다.");
//				break;
//			case 9: case 10: case 11:
//				System.out.println("현재의 계절은 가을입니다.");
//				break;
//			default:
//		// case 12:	case 1: case 2:
//				System.out.println("현재의 계절은 겨울입니다.");
//		}
//	} // main의 끝
//}
//


////4-6_1
//class FlowEx06 {
//	public static void main(String[] args) { 
//		
//		String rank = "상병";
//		
//		if (rank.equals("상병")) { // true,false
//			System.out.println("휴가");
//		}
//		
//		else {
//			System.out.println("훈련");
//		}
//		
//		System.out.println();
//		
//		switch (rank) { // 변수명
//		
//			case "상병": //값
//				System.out.println("휴가");
//				break;
//			
//			default:
//				System.out.println("훈련");
//				break;
//		}
//	}
//}


////4-12
//class FlowEx12 {
//	int count = 20; // 멤버변수 : 클래스를 new 할 때 만들어지는 객체의 기본 멤버가 된다.
//	
//	void print(int count) { // 파라미터 변수 : 메소드가 호출될때 외부에서 전달한 값이 할당되면서 만들어 진다.
//		
//	}
//	
//	public static void main(String[] args) { 
//		
////		int count = 10; // 지역변수 : 코드 처리의 흐름이 도달 할 때 자동으로 메모리에 변수가 만들어 진다.값은 직접 할당해야 한다.
////		
////		if (true) {
////			// 범위연산자를 기분으로 안쪽에서 바깥쪽에 있는 변수는 접근해서 사용할 수 있다.
////			int count2 = count;
////			int count3 = 20;
////		}
////			// 범위연산자를 기준으로 안쪽에서 선언한 변수는 바깥쪽에서 접근해서 사용할수 없다.
////			int count4 = count3;
////			
////			
////		for (초기식; 조건식; 증감식) {
////			System.out.println("코드1");
////			System.out.println("코드2");
////			System.out.println("코드3");
////		}
////		
//		// 조건식 : 최초에 한번만 수행된다.
//		// 조건식 처리 결과가 true 이면 for문 범위안에 코드를 수행하고 그렇지 않으면 for문을 벗어난다.
//		// 증감식 : for문 범위안에 코드를 수행한 후 반복적으로 수행하야 하는 구문을 배치하는 곳이고 다음으로
//		// 조건식이 처리된다.
//		for (int i = 0; i < 3; i++) {
//			System.out.println("i = " + i);
//		}
//		//int k = i;
//		
//		for(int i=1;i<=5;i++)
//			System.out.println(i); // i의 값을 출력한다.
//
//		for(int i=1;i<=5;i++)
//			System.out.print(i);  // println()대신 print()를 쓰면 가로로 출력된다.
//
//		System.out.println();
//	}
//}


////4-13
//class FlowEx13 {
//	public static void main(String[] args) { 
//		
//		
////		int  i = 1;
////		for (; i <= 3; ) {
////			System.out.print(i+",  ");
////			
////			i++;
////		}
////		
//		
////		int sum = 0;	// 합계를 저장하기 위한 변수.
////
////		for(int i=1; i <= 3; i=i+1) {
////			/*
////			 *   i   i <= 3   sum = sum + i    i=i+1
////			 *   1   1 <= 3   sum = 0 + 1        2
////			 *         true
////			 *       2 <= 3   sum = 1 + 2        3  
////			 *       3 <= 3   sum = 3 + 3        6
////			 *       4 <= 3    flase
////			 * */
////			
////			
////			
////			sum = sum + i; //sum += i ;
////			System.out.printf("1부터 %2d 까지의 합: %2d%n", i, sum);
////		}
//		
//		// l부터 100까지 정수의 합을 구해서 출력하세요
//		
//		int sum = 0;
//		
//		//sum = 1 + 2 + 3 + 4 + ...+100;
//		
//		for (int i = 1; i <= 100; i++) {
//			sum = sum +i;
//			
//		}
//		System.out.println(sum);
//		
//	} // main의 끝
//}

////4-14
//class FlowEx13 {
//	public static void main(String[] args) { 
//		
//		
////		int  i = 1;
////		for (; i <= 3; ) {
////			System.out.print(i+",  ");
////			
////			i++;
////		}
////		
//		
////		int sum = 0;	// 합계를 저장하기 위한 변수.
////
////		for(int i=1; i <= 3; i=i+1) {
////			/*
////			 *   i   i <= 3   sum = sum + i    i=i+1
////			 *   1   1 <= 3   sum = 0 + 1        2
////			 *         true
////			 *       2 <= 3   sum = 1 + 2        3  
////			 *       3 <= 3   sum = 3 + 3        6
////			 *       4 <= 3    flase
////			 * */
////			
////			
////			
////			sum = sum + i; //sum += i ;
////			System.out.printf("1부터 %2d 까지의 합: %2d%n", i, sum);
////		}
//		
//		// l부터 100까지 정수의 합을 구해서 출력하세요
//		
//		int sum = 0;
//		
//		//sum = 1 + 2 + 3 + 4 + ...+100;
//		
//		for (int i = 1; i <= 100; i++) {
//			sum = sum +i;
//			
//		}
//		System.out.println(sum);
//		
//	} // main의 끝
//}


////4-15
//class FlowEx15 {
//	public static void main(String[] args) { 
//	   System.out.println("i \t 2*i \t 2*i-1 \t i*i \t 11-i \t i%3 \t i/3");
//	   System.out.println("----------------------------------------------------");
//
//		for(int i=1;i<=10;i++) {
//			System.out.printf("%d \t %d \t %d \t %d \t %d \t %d \t %d%n", i, 2*i, 2*i-1, i*i, 11-i, i%3, i/3);
//		}
//	}
//}


////4-16
class FlowEx16 {
	public static void main(String[] args) { 
		
		for(int i=1;i<=5;i++) { // 5번 수행  ==> 행 개수
			for(int j=1;j<=10;j++) { //10번 수행 ==> 열 개수
				System.out.print("*");			
			}
			
			System.out.println();
		} // 총 50번 수행 
		
	} // main의 끝
	
}

////4-17
//import java.util.*;
//
//class FlowEx17 {
//	public static void main(String[] args) { 
//		int num = 0;
//
//		System.out.print("*을 출력할 라인의 수를 입력하세요.>");
//
//		Scanner scanner = new Scanner(System.in);
//		String tmp = scanner.nextLine();  // 화면을 통해 입력받은 내용을 tmp에 저장
//		num = Integer.parseInt(tmp);      // 입력받은 문자열(tmp)을 숫자로 변환
//
//		for(int i=0;i<num;i++) {
//			for(int j=0;j<=i;j++) {
//				System.out.print("*");
//			}
//			System.out.println();
//		}
//	} // main의 끝
//}

////4_17_1
//import java.util.*;
//
//class FlowEx17_1 {
//	public static void main(String[] args) {
//
////		for (int i = 0; i < 5; i++) {
////			System.out.print("*");
////		}
////
////		System.out.println();
////		
////		for (int i = 0; i < 5; i++) {
////			System.out.print("*");
////		}
////		System.out.println();
////		
////		for (int i = 0; i < 5; i++) {
////			System.out.print("*");
////		}
////		System.out.println();
//
//		
//		
////		proceed();
////		proceed();
////		proceed();
//		
////		for (int i = 1; i <= 3; i++) {
////			proceed();
////		}
//		
//		
//		for (int i = 1; i <= 3; i++) {  // 행개수
//			for (int j = 0; j < 5; j++) { // 열 개수
//				System.out.print("*");
//			}
//
//			System.out.println();
//		}
//		
//	} // main의 끝
//
//	private static void proceed() {
//		// TODO Auto-generated method stub
//
//		for (int i = 0; i < 5; i++) {
//			System.out.print("*");
//		}
//
//		System.out.println();
//		
//	}
//}

////4-17_2
//import java.util.*;
//
//class FlowEx17_2 {
//	public static void main(String[] args) {
//
//		// *****
//		// *****
//		// *****
//
//		for (int i = 1; i <= 3; i++) { // 행개수
//			for (int j = 0; j < 5; j++) { // 열 개수
//				System.out.print("*");
//			}
//
//			System.out.println();
//		}
//
//		System.out.println();
//
//		// ***
//		// ***
//		// ***
//
//		for (int i = 1; i <= 3; i++) { // 행개수
//			for (int j = 1; j <= 3; j++) { // 열 개수
//				System.out.print("*");
//			}
//
//			System.out.println("");
//		}
//
//		System.out.println();
//
//		// * 1행==> 1개
//		// ** 2행==> 2개
//		// *** 3행==> 3개
//
//		for (int i = 1; i <= 3; i++) { // 행개수
//			for (int j = 1; j <= i; j++) { // 열 개수
//				System.out.print("*");
//			}
//
//			System.out.println("");
//		}
//
//		System.out.println();
//
//		// *** 1행==> 3개
//		// ** 2행==> 2개
//		// * 3행==> 1개
//
//		for (int i = 1; i <= 3; i++) { // 행개수
//			for (int j = 0; j <= 3 - i; j++) { // 열 개수
//				System.out.print("*");
//			}
//
//			System.out.println("");
//		}
//
//		System.out.println();
//		// 	* 1행==> 1개
//		// *** 2행==> 3개
//		// 	* 3행==> 1개
//
//
//		for (int i = 1; i <= 3; i++) { // 행개수
//			for (int j = 1; j <= 3; j++) { // 열 개수
//				//System.out.print("*");
//
//				if ( i %2 == 1) {
//					System.out.print(" * ");
//					break;
//				}
//				else {
//					System.out.print("*");
//				}
//			
//			}
//			System.out.println();
//		}
//
//	} // main의 끝
//
//}


////4-18
//class FlowEx18 {
//	public static void main(String[] args) {
//
////		for(int i=2;i<=9;i++) { 
////			for(int j=1;j<=9;j++) {
////				System.out.printf("%d x %d = %d%n", i, j, i*j);			
////			}
////	}
//		for (int i = 1; i <= 9; i++) {
//			for (int j = 1; j <= 9; j++) {
//				System.out.printf("%d x %d = %d%n", j, i , i * j);
//				//System.out.println();
//			}
//			System.out.println();
//		} // main의 끝
//	
//		
//	}
//	
//}


////4-20
//class FlowEx20 {
//	public static void main(String[] args) { 
//		for(int i=1;i<=5;i++) { 
//			for(int j=1;j<=5;j++) {
//				System.out.printf("[%d,%d]", i, j);			
//			}
//			System.out.println();
//		}
//	} // main의 끝
//}


////4-22
//class FlowEx22 {
//	public static void main(String[] args) { 
//		// [] : 배열(Array), 배열도 객체다.
//		// 배열은 다수의 데이터를 보관 할 수 있는데 , 선언시 설정한 자료형의 데이터만 보관 할 수 있다.
//		// new 설계도() 처럼 선언하지 않고 만드는 객체 2가지 기억하나요?
//		// String name = "홍길동";
//		
//		int[] arr = {10,20,30,40,50};
//		int sum = 0;
//	
//		for(int i=0;i<arr.length;i++) { // i<5   0,1,2,3,4
//			// 배열을 참조하는 변수 [인덱스] : 인덱스는 0부터 시작한다.
//			System.out.printf("%d ", arr[i]);
//		}
//		System.out.println();		
//
//		// 진보된 for문은 회전수를 제어하는 변수(i)가 필요없다. 배열의 길이만큼 자동으로 회전한다.
//		for(int tmp : arr) {
//			System.out.printf("%d ", tmp);
//			sum += tmp;
//		}
//		System.out.println();		
//		System.out.println("sum="+sum);
//	} // main의 끝
//}

////4-22_1
//class FlowEx22 {
//	public static void main(String[] args) { 
//		// [] : 배열(Array), 배열도 객체다.
//		// 배열은 다수의 데이터를 보관 할 수 있는데 , 선언시 설정한 자료형의 데이터만 보관 할 수 있다.
//		// new 설계도() 처럼 선언하지 않고 만드는 객체 2가지 기억하나요?
//		// String name = "홍길동";
//		
//		int[] arr = {10,20,30,40,50};
//		int sum = 0;
//	
//		for(int i=0;i<arr.length;i++) { // i<5   0,1,2,3,4
//			// 배열을 참조하는 변수 [인덱스] : 인덱스는 0부터 시작한다.
//			System.out.printf("%d ", arr[i]);
//		}
//		System.out.println();		
//
//		// 진보된 for문은 회전수를 제어하는 변수(i)가 필요없다. 배열의 길이만큼 자동으로 회전한다.
//		for(int tmp : arr) {
//			System.out.printf("%d ", tmp);
//			sum += tmp;
//		}
//		System.out.println();		
//		System.out.println("sum="+sum);
//	} // main의 끝
//}

////4-23
//class FlowEx23 {
//	public static void main(String[] args) { 
//		
//		int i= 5;
//		
//		i = i - 1;
//		
//		while(i--!=0) { // 후저리 증감식 : 비교투터하고 그다음에 -1;
//			System.out.println(i + " - I can do it.");
//		}
//		
//		System.out.println("");
//			
//		 i= 5;
//
//		while(--i !=0) { // 전 처리 증감식 : 먼저 -1을 수행하고 그다음 비교한다.
//			System.out.println(i + " - I can do it.");
//		}
//		
//		System.out.println("");
//		
//		i= 5;
//		
//		
//		
//		while(i !=0) { // 후저리 증감식 : 비교투터하고 그다음에 -1;
//			i = i - 1;
//			System.out.println(i + " - I can do it.");
//		}
//		
//		System.out.println("");
//		
//	} // main의 끝
//}



////4-23_1
//class FlowEx23_1 {
//	public static void main(String[] args) throws InterruptedException { 
//		
//		boolean condition = true;
//		
//		int count = Integer.MAX_VALUE-1;
//		
//		while (condition) {
//			System.out.print(count);
//			count = count +1;
//			
//			Thread.sleep(1000);
//			
//		}
//		
//	} // main의 끝
//}

////4-25
//import java.util.*;
//
//class FlowEx25 {
//	public static void main(String[] args) { 
//		int num = 0; 
//		int sum = 0;
//
////		System.out.print("숫자를 입력하세요.(예:12345)>");
////		Scanner scanner = new Scanner(System.in);
////		String tmp = scanner.nextLine(); // 화면을 통해 입력받은 내용을 tmp에 저장
////		num = Integer.parseInt(tmp);      // 입력받은 문자열(tmp)을 숫자로 변환
//
//		num = getValueFromUser(); //캡슐화 : 복잡한 부분을 감싸서 사용자는 단순하게 사용할 수 있도록 만드는 방법 
//		
//		while(num!=0) {    
//			// num을 10으로 나눈 나머지를 sum에 더함
//			sum += num%10; 	// sum = sum + num%10; 
//			// 10진수 정수의 마지막 자릿수의 값 구하기
//			System.out.printf("sum=%3d num=%d%n", sum, num);
//
//			num /= 10;  // num = num / 10;  num을 10으로 나눈 값을 다시 num에 저장 
//			//10진수 정수의 값에서 마지막 자릿수의 값 삭제하기
//		}
//		
//		System.out.println("각 자리수의 합:"+ sum);
//	}
//
//	private static int getValueFromUser() {
//		// TODO Auto-generated method stub
//		
//		System.out.print("숫자를 입력하세요.(예:12345)>");
//		Scanner scanner = new Scanner(System.in);
//		String tmp = scanner.nextLine(); // 화면을 통해 입력받은 내용을 tmp에 저장
//		return Integer.parseInt(tmp);      // 입력받은 문자열(tmp)을 숫자로 변환
//	}
//}

////4-28
//import java.util.*;
//
//class FlowEx28 {
//	public static void main(String[] args) { 
//		int input  = 0;
//		int answer = 0;
//
//		answer = (int)(Math.random() * 100) + 1; // 1~100사이의 임의의 수를 저장
////		System.out.println("컴퓨터가 랜덤하게 구한 정수 answer = "+ answer);
//		Scanner scanner = new Scanner(System.in);
//
//		do {
//			System.out.print("1과 100사이의 정수를 입력하세요.>");
//
//			String tmp = scanner.nextLine();
//			input = Integer.parseInt(tmp);
//
//			if(input > answer) {
//				System.out.println("더 작은 수로 다시 시도해보세요.");	
//			} else if(input < answer) {
//				System.out.println("더 큰 수로 다시 시도해보세요.");			
//			}
//		} while(input!=answer);
//		
////		수행 코드 (1번은 무조건 수행해야 한다)
////		while(조건식) {
////			수행 코드 (1번은 무조건 수행해야 한다)
////		}
//
//		System.out.println("정답입니다.");
//	}
//}


////0-1
//public class Java_0810 {
//	
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub
//		// 클래스 설계도를 사용하여 객체를 만드는 문법
//		// new 클래스명 ()
//		
//	new Dog();
//	
//	// 힙 메모리에 만들어진 객체럴 실제로 사용하려면 그 객체를 가리키는  변수를 통해서 접근해야 된다.
//	
//	Dog myDog = new Dog();
//	
//	String breed = "멍멍이";
//	
//	// . : 객체가 갖고있는 변수,메소드에 접근하는 방법
//	// 메소드 호출하는 문법
//	// 메소드명(필요할 경우 파라미터를 전달)
//	myDog.run(breed);
//
//	}
//	
//}
//
//// 관찰대상 실체를 보고 설계도 class를 만든다.
//// 클래스란 (class) : 객체를 만들기 위한 설계도
//// 객체 (Object) : 여러개의 변수(상태)와 메소드(기능)를 갖고 있으며 변수와 메소드를 위한 메모리를 차지하고 있는 상태
//// 클래스를 만드는 문법
//// class 클래스명 {
////
//// }
//class Cat {
//	
//}
//
//class Dog{
//	// 변수를 만드는 문법
//	// 자료형 변수명 = 값
//	// 자료형 : 해당변수가 취급하는 데이터의 종류 및 크기 
//	String breed = "Jindo";
//	int age = '2';
//	
//	// 자료형의 종류
//	// 크키가 한정되어 있는 자료형 : 원시타입 자료형
//	// true, false ==> boolean
//	// 정수 ==> byte(1), short(2),  int(4), long(8),
//	// 실수 ==> float(4), double(8)
//	// 한글자 => char(2)
//	
//	// 크기가 무한한 자료형 : 참조타입 자료형
//	// 배열 ==> []
//	// 객체 (Object) => new 클래스명()
//	// 문자열 ==> String
//	
//	// 메소드를 만드는 문법
//	// 리턴자료형 메소드명(파라미터) {
//	//
//	//}	
//	
//	// 파라미터 : 메소드가 호출되어 가동할때 외부로부터 받는 값
//	// void : 해당 메소드는 return 하는 값이 없다.
//	void run(String breed) { //(String breed) = "멍멍이"
//		System.out.println(breed + "개가 달린다.");
//	}
//	
//	String order() {
//		return "막대기";
//	}
//	
//	
//}


//public class Java_0810 {
//	
//	public static void main(String[] args) {
//	
//		Bicycle b = new Bicycle();
//	
//		b.speedup(10);
//		
//		b.printState();
//	
//	}
//
//}
//
////자전거 설계도
//class Bicycle {
//	int speed = 0; // 멤버변수 : 특정값으로 초기화 하지 않으면 미리 전해진 기본값으로 자동으로 초기화 된다.
//	
//	// 변수를 만드는 문법
//	// 자료형 변수명 = 값
//
//	void speedup(int increment) { // 파라미터 변수 : 외부에서 전달한 값이 자동으로 할당된다. 
//		
//		speed = speed + increment;
//		
//	}
//	void printState() {
//		int mySpeed = speed; // 지역변수 : 직접 값을 할당한 후에 사용해야한다.
//		System.out.printf("speed= %d ", mySpeed);
//	}
//}

패키지 하나 만들고 0-2/0-3/ 만들기 

//0-2
package ch04;

public class Snowmen {
	
	String name = "스노우맨";
	


	public void forward() {
		System.out.println(" Snowmen # forward() called.");
	}
	public void turnRight() {
		System.out.println(" Snowmen # turnRight() called.");
	}
	public void foot() {
		System.out.println(" Snowmen # foot() called.");
	}
	public void turnLeft() {
		System.out.println(" Snowmen # turnLeft() called.");
	}


}

//0-3
package ch04;

public class Mission {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Snowmen snowmen = new Snowmen();
		
		snowmen.forward();
		snowmen.forward();
		snowmen.turnRight();
		snowmen.foot();
		snowmen.forward();
		snowmen.forward();
		snowmen.turnLeft();	
		
	}

}

클래스 만들고 0-4 만들기
//0-4
package ch04;

public class Angle {
	// 멤버변수
	String name = "엔젤";

	// 멤버 메소드
	
	public void forward() {
		System.out.println(" 엔젤 # forward() called.");
	}
	public void turnLeft() {
		System.out.println(" 엔젤 # turnLeft() called.");
	}
	public void turnRight() {
		System.out.println(" 엔젤 # turnRight() called.");
	}
	public void flower() {
		System.out.println(" 엔젤 # flower() called.");
	}
	
	
	
	public static void main(String[] args) {
		// 미션 수행하기 : for문 또는 while문을 쓰세요
		
		Angle a = new Angle();
//		
//		a.forward();
//		a.turnLeft();
//		a.flower();
//		for (int i = 1; i <= 3; i++) {
//			a.forward();
//			a.turnLeft();
//			a.flower();
//			a.turnRight();
//			a.forward();
//			System.out.println("");
//		}
		int i = 1;
		while (i <= 3) {
			a.forward();
			a.turnLeft();
			a.flower();
			a.turnRight();
			a.forward();
			System.out.println("");
			i++;
		}
		

	}
}




for문은 횟수로 제어 while문은 조건으로 제어 