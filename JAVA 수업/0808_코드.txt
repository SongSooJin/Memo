2018/08/08

자바 수업 _코드 

패키지 생성후 

public class Text_0808 {
	// 기동 메소드  : 자바 프로그램의 시작을 담당한다. 메소드의 정의가 미리 정해져 있+다.
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 컨트롤 + d : 한줄 삭제
		// 들여쓰기 : 코드 가독성을 향상시키기 위해서 사용한다.
		// 1. 키보드 tab
		// 2. 스페이스 키
		
		
//1-1		//int age = 25;
		// int : 취급하는 자료형, 박스 크기
		// age : 변수명, 박스 테그
		// = : 할당연산자, 오른쪽의 값을 왼쪽에 할당한다.
		// 25 : age 변수가 실제로 보관하는 값
		// ; : 명령문의 끝을 의미한다.
		
		/*
		 * 변수란?
		 * 단 하나의 값을 저장할 수 있는 메모리 공간 
		 * 값을 보관하는 박스를 가르키는 참조 (Referemce)
		 * 자바는 메모리의 실제 주소값을 알 수없다. C언어는 알 수 있다.
		 * 자바의 변수는 메모리 주소값을 가질수 없다. C언어는 할 수있다.
		 * 그래서 자바는 포인터라는 용어대신 창조값이라는 용어를 사용한다. 
		 * */
		// 프로그램 코드의 처리순서
		// 위에서부터 한 줄씩 아래로 처리한다.
		// 할당연사자를 기분으로 오른쪽부터 처리하고 왼쪽이 처리한다.
		//tab 사이즈 변경
		// java >> code Style >>Formatter #Edit # Indentation

//1-1	int year = 0;
//		int age =14;
//		
//		System.out.println(year);
//		System.out.println(age);
//		
//		year = age + 2000;
//		age = age + 1 ;
//		
//		System.out.println(year);
//		System.out.println(age);
	
//1-2		int x = 10;
//		int y = 20;
//		int z = 0;
//		
//		// x 와 y의 값을 서로 교환하고 싶다.=> 임시로 값을 보관하는 다른 변수가 하나 더 필요하다.
//		
//		System.out.println("x = "+ x +", y =" + y+", z =" + z);
//		
//		
//		
//		//변수를 사용하여 연산을 수행하면 변수가 가리키는 박스의 값을 사용하여 연산을 처리한다.
//		z = x;
//		///교환작업 : x와 y의 값을 서로 교환.
//		// x박스의 값을 덮어쓰기해서 소실하기 전에 다른 변수에 보관해야 한다.
//		z = x;
//		
//		x = y; 
//		y = z;
//		
//		System.out.println("x = "+ x +", y =" + y +", z =" + z);
//		
		
//1-3		int a = 1;
//		int A = 2;
//	//	int a = 2; //같은 변수명을 중복해서 선언 할수 없다.
//		
//	//	int void = 3; // 빨간색은 예약어, 예약어를 변수명으로 사용 할수 없다.
//		
//		int a10 = 4; // 변수명은 숫자로 시작할 수 없다.
//		int _x = 5;	// 특수문자는 _,$만 가능하다.	
//		int $y = 6;  
		
//		String myGirlsName = "수지"; // 가독성때문에 문자의 첫글자는 대문자로 쓴다. Camel-case
//		String mygirlsname = "수지"; 
//		int yourBoyFriendsAge = 24;
//		
//		// 상수 : 변하지 않는 수, 항상 똑같은 수 
//		double MATH_PI = 3.141592; // _ :under-score ,수정하지 말고 그대로 사용하라고 안내해주기 위해서 대문자로 작성한다.
//		double mathPi  = 3.141592;


//1-4		boolean isGood = true; // true or false, 1byte
//		isGood = false;
//		
//		char letter = 'a'; // 1글자만 저장이 가능하다. 싱글쿼테이션으로 선언해야 한다.
//		
//		// 정수만 취급한다.
//		byte verySmallInt = 1; // 1byte
//		short SmallInt = 2; // 2byte
//		int integer = 3; // 4yte -21억~21억 까지 담을수 있다.
//		long bigInt = 4; // 8yte
//		
//		// 실수를 취급한다.
//		float f = 3.14F; // 4byte, 8바이트 크기의 long 자료형보다 4바이트 크기의 float 자료형의 박스가 더 큰 숫자를 담는다.
//		double d= 3.14; // 8byte
//		
//		// literal : 원래 약속된 대로 사용하는 값 


//	// 변수 : 특정 시작에 보관하고 있는 값
//1-5	static int positionBot = 0;
//	static int positionOfBag = 3;
//	// 시작하기
//	public static void main(String[] args) {
//		moveRight();
//		moveRight();
//		moveRight();
//		
//		int result = miltilyBy2(3);
//		
//		System.out.println("result =" + result);
//	}
//	// 리턴자료형 메소드형()
//	// 메소드 : 아래 코드를 수행할수 있다. 변수의 값을변경 할 수있다.
//	static void moveRight() {
//		System.out.println("오른쪽으로 1칸 움직인다.");
//		positionBot = positionBot + 1;
//		if (positionBot == positionOfBag) {
//			System.out.println("성공");
//		}
//	}
//	
//	static int miltilyBy2(int x) {
//		int y = x *2;
//		return y;
//	}
//	
//}


package 생성 후 클래스 2-1, 2-2, 2-3 각각 클래스 3개 생성. =>실행 메인함수 있는곳

2-1 class Car {
	String name = "소나타"; //멤버변수: 클래스 박스가 직접 갖고 있는 변수 
	String color = "black";
	
	void run() {
		String weather = "맑음"; //지역변수 : 메소드 박스가 갖고 있는 변수
		System.out.println("차가 움직인다.");
		
	}
	
	void openDoor(Client client) {
		System.out.println("문이 열리고 손님이 탄다. 손님의 이름 = " + client.name);
		
	}
}

2-2 class Client {

	String name ="홍길동";
}

2-3 public class TextMain_0808 {
	
	public static void main(String[] args) {
		// new Car(); Car 설계도를 사용하여 새 객체를 만든다.
		// 객체는 Heep 메모리영역에 만들어진다. 객체는 언제나 Heep메모리에 만들어진다.
		
		Car car = new Car();
		
		Client client = new Client();
		//client.name = "일지매";
		
		car.openDoor(client);
		car.run();
		
	}
}

//3-1	public class p28_0808 {
//	public static void main(String[] args) {
//		// 자료형으로 박스의 크기, 박스에 담을 수있는 데이터의 종류를 한정한다.
//		
//		boolean isGood = true; // true or false, 1byte
//		isGood = false;
//		
//		char letter = 'a'; // 1글자만 저장이 가능하다. 싱글쿼테이션으로 선언해야 한다.
//		
//		// 정수만 취급한다.
//		byte verySmallInt = 1; // 1byte
//		short SmallInt = 2; // 2byte
//		int integer = 3; // 4yte -21억~21억 까지 담을수 있다.
//		long bigInt = 4; // 8yte
//		
//		// 실수를 취급한다.
//		float f = 3.14F; // 4byte, 8바이트 크기의 long 자료형보다 4바이트 크기의 float 자료형의 박스가 더 큰 숫자를 담는다.
//		double d= 3.14; // 8byte
//		
//		// literal : 원래 약속된 대로 사용하는 값 
//	}
//}

패키지 생성후 

import java.util.*;    // Scanner를 사용하기 위해 추가
//java.util.*; 패키지 밑에 존재하는 *(모든) 클래스들을 이 클래스 (p28_2_0808)에서 사용할때]
// 패키지명은 생략하고 클래스 명 만으로도 짧게 사용할 수 있게 만든다.
public class p28_2_0808 {

	public static void main(String[] args) { //메소드 영역 = 파라미터 + 범위연산자 시작~끝
		
		// 숫자 리터럴
		// 정수로 선언하면 자동적으로 int 자료형으로 취급한다.
		// 실수로 선언하면 자동적으로 double 자료형으로 취급한다.
		
//4-1		short x = 1;
//		int y = x; //자동 형변환! 묵시적 형변환!
//		//	x = y; //큰 박스의 값을 작은 박스에 옮길때 값의 손실이 있다면 자바는 자동적으로 수행하지 않는다.
//		x = (short) y; // (자료형) : 형변환연산자, 지정된 자료형으로 변환한 후 사용한다. 명시적 형변환!
//		
//		
//		//int z = 2200000000;
//		
//		double a = 0;
//		//위 코드는 다음 코드와 의미적으로 같다. double a = (double) (int) 0;
//		
//		float b =1;
//		// 위 코드는 다음 코드와 의미적으로 같다. float b = (float) (int) 1;
//		
//		double c = 0.12;
//		// 위 코드는 다음 코드와 의미적으로 같다. double c = (double) 0.12;
//		
//		//float d = 1.0;
//		// 위코드는 다음 코드와 의미적으로 같다. float d = (double) 1.0;
//		
//		float f1 = (float) 1.0;
//		float f2 = 1.0f;
//		
//		long big = 100_000_000;
		
//4-2	String firstName = "Tom";
//		String laststName = "Cruise";
//		
//		System.out.println(firstName + laststName);
//		
//		int num = 10;
//		String number = "10";
//
//		System.out.println(num + number); //1010
//		
//		String name = "Ja" + "va";
//		String str  = name + 8.0;
//
//		System.out.println(name);
//		System.out.println(str);
//		System.out.println(7 + " ");
//		System.out.println(" " + 7);
//		System.out.println(7 + "");
//		System.out.println("" + 7);
//		System.out.println("" + "");
//		
//		System.out.println(7 + 7 + ""); // 14
//		System.out.println("" + 7 + 7); // 77
//		
//		// 컨트롤 알트 화살표 아래키 : 한줄복사
//		System.out.println("" + (7 + 7)); // ():우선순위 연산자 14
		
//4-3	byte  b = 1;
//		short s = 2;
//		char  c = 'A';
//
//		int  finger = 10; 
//		long big = 100_000_000_000L;   
//		
//		long oct = 077; // 8진수
//		
//		// 10진수 : 0,1,2...9
//		// 16진수 : 0,1,2....9,A,B,C,D,E,F ex) color표현
//		long hex = 0xFFFF_FFFF_FFFF_FFFFL ;  // long hex = 0xFFFFFFFFFFFFFFFFL;
//
//		int octNum = 010;       //  8진수 10, 10진수로는 8
//		int hexNum = 0x10;      // 16진수 10, 10진수로는 16
//		int binNum = 0b10;      //  2진수 10, 10진수로는 2
//		
//		
//		System.out.println("출력 줄바꿈 있음");	
//		System.out.print("출력 줄바꿈 없음");
//		System.out.println("출력 줄바꿈 있음");	
//		
//		// 자료형에 따른 위치보유자 문법,특수기호를  사용할수 있다.
//		// %d는 숫자(decimal) , %b 줄바꿈 ,%c char형, 
//		System.out.printf("b=%d%n", b);
//		System.out.printf("s = %d %n", s);
//		System.out.printf("c=%c, %d %n", c, (int)c);
//		System.out.printf("finger=[%5d]%n",  finger);
//		System.out.printf("finger=[%-5d]%n", finger);
//		System.out.printf("finger=[%05d]%n", finger);
//		System.out.printf("big=%d%n", big);
//		System.out.printf("hex=%#x%n", hex); // '#'은 접두사(16진수 0x, 8진수 0)
//		System.out.printf("octNum=%o, %d%n", octNum, octNum);   
//		System.out.printf("hexNum=%x, %d%n", hexNum, hexNum);   
//		System.out.printf("binNum=%s, %d%n", Integer.toBinaryString(binNum), binNum);  
//		
//		int x1 = 1;
//		int x2 = 2;
//		int x3 = 3;
//		
//		System.out.println("x1:" + x1 +"x2:"+x2+"x3:"+x3);
//		System.out.printf("x1:%dx2:%dx3:%d",x1,x2,x3);
//		System.out.println();
//		System.out.println("done");	
		
		
//4-4		Scanner scanner = new Scanner(System.in);
//
//		System.out.print("두자리 정수를 하나 입력해주세요.>");
//
//		String input = scanner.nextLine();
//		int num = Integer.parseInt(input); // 입력받은 문자열을 숫자로 변환
//
//		System.out.println("입력내용 :"+input);
//		System.out.printf("num=%d%n", num);
		
		}
		
	}


package 생성 후 클래스 5-1, 5-2, 5-3 각각 클래스 3개 생성. =>실행 메인함수 있는곳

5-1 package p40.korea;

public class president {

}

5-2 package p40.usa;

public class president {

}

5-3 package p40;

import  p40.usa.president;
public class TestPresident {

	 p40.korea.president koreaPresident = new  p40.korea.president();
	 p40.usa.president usaPresident = new  p40.usa.president();
	 
	 p40.usa.president usaPresident1 = new  p40.usa.president();
	 president usaPresident2 = new president();
	 president usaPresident3 = new president();
	 president usaPresident4 = new president();
	 
	 
	 
}










